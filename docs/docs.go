// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-04-09 14:43:55.960303529 +0200 CEST m=+0.083990639

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/projects": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Lists all projects of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Project"
                            }
                        }
                    }
                }
            }
        },
        "/projects/adduser": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Lists all projects of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/projects/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create project",
                "produces": [
                    "application/json"
                ],
                "summary": "Lists all projects of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project name",
                        "name": "projectname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/projects/removeUser": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Removes a user from a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/projects/wes/add": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "summary": "Creates a new user if none exists; not intended for production use: In production users are dynamically created based on external oauth2/oidc ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "endpoint name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "wes link",
                        "name": "link",
                        "in": "query",
                        "required": true
                    }
                ]
            }
        },
        "/projects/wes/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "summary": "Creates a new user if none exists; not intended for production use: In production users are dynamically created based on external oauth2/oidc ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.WESEndpoint"
                            }
                        }
                    }
                }
            }
        },
        "/projects/workflows/add": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "summary": "Creates a new user if none exists; not intended for production use: In production users are dynamically created based on external oauth2/oidc ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "workflow name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "workflow link",
                        "name": "link",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "workflow version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/projects/workflows/get": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "summary": "Returns all workflows of a given project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "workflow id",
                        "name": "workflowID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    }
                }
            }
        },
        "/projects/workflows/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "summary": "Returns all workflows of a given project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "project id",
                        "name": "projectid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Workflow"
                            }
                        }
                    }
                }
            }
        },
        "/users/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "summary": "Creates a new user if none exists; not intended for production use: In production users are dynamically created based on external oauth2/oidc ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user email address",
                        "name": "usermail",
                        "in": "query",
                        "required": true
                    }
                ]
            }
        }
    },
    "definitions": {
        "models.Project": {
            "type": "object",
            "properties": {
                "ProjectID": {
                    "type": "string"
                },
                "ProjectName": {
                    "type": "string"
                }
            }
        },
        "models.WESEndpoint": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "Link": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Owner_id": {
                    "type": "string"
                }
            }
        },
        "models.Workflow": {
            "type": "object",
            "properties": {
                "Link": {
                    "type": "string"
                },
                "Project_id": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                },
                "WorkflowID": {
                    "type": "integer"
                },
                "Workflowname": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "Project handler API for the Krini project",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
