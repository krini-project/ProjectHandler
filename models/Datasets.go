// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Dataset is an object representing the database table.
type Dataset struct {
	DatasetID int         `boil:"DatasetID" json:"DatasetID" toml:"DatasetID" yaml:"DatasetID"`
	Endpoint  null.String `boil:"Endpoint" json:"Endpoint,omitempty" toml:"Endpoint" yaml:"Endpoint,omitempty"`
	Bucket    null.String `boil:"Bucket" json:"Bucket,omitempty" toml:"Bucket" yaml:"Bucket,omitempty"`
	Key       null.String `boil:"Key" json:"Key,omitempty" toml:"Key" yaml:"Key,omitempty"`
	ProjectID null.String `boil:"Project_id" json:"Project_id,omitempty" toml:"Project_id" yaml:"Project_id,omitempty"`

	R *datasetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L datasetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DatasetColumns = struct {
	DatasetID string
	Endpoint  string
	Bucket    string
	Key       string
	ProjectID string
}{
	DatasetID: "DatasetID",
	Endpoint:  "Endpoint",
	Bucket:    "Bucket",
	Key:       "Key",
	ProjectID: "Project_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DatasetWhere = struct {
	DatasetID whereHelperint
	Endpoint  whereHelpernull_String
	Bucket    whereHelpernull_String
	Key       whereHelpernull_String
	ProjectID whereHelpernull_String
}{
	DatasetID: whereHelperint{field: "`Datasets`.`DatasetID`"},
	Endpoint:  whereHelpernull_String{field: "`Datasets`.`Endpoint`"},
	Bucket:    whereHelpernull_String{field: "`Datasets`.`Bucket`"},
	Key:       whereHelpernull_String{field: "`Datasets`.`Key`"},
	ProjectID: whereHelpernull_String{field: "`Datasets`.`Project_id`"},
}

// DatasetRels is where relationship names are stored.
var DatasetRels = struct {
	Project string
}{
	Project: "Project",
}

// datasetR is where relationships are stored.
type datasetR struct {
	Project *Project
}

// NewStruct creates a new relationship struct
func (*datasetR) NewStruct() *datasetR {
	return &datasetR{}
}

// datasetL is where Load methods for each relationship are stored.
type datasetL struct{}

var (
	datasetAllColumns            = []string{"DatasetID", "Endpoint", "Bucket", "Key", "Project_id"}
	datasetColumnsWithoutDefault = []string{"Endpoint", "Bucket", "Key", "Project_id"}
	datasetColumnsWithDefault    = []string{"DatasetID"}
	datasetPrimaryKeyColumns     = []string{"DatasetID"}
)

type (
	// DatasetSlice is an alias for a slice of pointers to Dataset.
	// This should generally be used opposed to []Dataset.
	DatasetSlice []*Dataset
	// DatasetHook is the signature for custom Dataset hook methods
	DatasetHook func(context.Context, boil.ContextExecutor, *Dataset) error

	datasetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	datasetType                 = reflect.TypeOf(&Dataset{})
	datasetMapping              = queries.MakeStructMapping(datasetType)
	datasetPrimaryKeyMapping, _ = queries.BindMapping(datasetType, datasetMapping, datasetPrimaryKeyColumns)
	datasetInsertCacheMut       sync.RWMutex
	datasetInsertCache          = make(map[string]insertCache)
	datasetUpdateCacheMut       sync.RWMutex
	datasetUpdateCache          = make(map[string]updateCache)
	datasetUpsertCacheMut       sync.RWMutex
	datasetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var datasetBeforeInsertHooks []DatasetHook
var datasetBeforeUpdateHooks []DatasetHook
var datasetBeforeDeleteHooks []DatasetHook
var datasetBeforeUpsertHooks []DatasetHook

var datasetAfterInsertHooks []DatasetHook
var datasetAfterSelectHooks []DatasetHook
var datasetAfterUpdateHooks []DatasetHook
var datasetAfterDeleteHooks []DatasetHook
var datasetAfterUpsertHooks []DatasetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dataset) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dataset) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dataset) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dataset) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dataset) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dataset) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dataset) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dataset) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dataset) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datasetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDatasetHook registers your hook function for all future operations.
func AddDatasetHook(hookPoint boil.HookPoint, datasetHook DatasetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		datasetBeforeInsertHooks = append(datasetBeforeInsertHooks, datasetHook)
	case boil.BeforeUpdateHook:
		datasetBeforeUpdateHooks = append(datasetBeforeUpdateHooks, datasetHook)
	case boil.BeforeDeleteHook:
		datasetBeforeDeleteHooks = append(datasetBeforeDeleteHooks, datasetHook)
	case boil.BeforeUpsertHook:
		datasetBeforeUpsertHooks = append(datasetBeforeUpsertHooks, datasetHook)
	case boil.AfterInsertHook:
		datasetAfterInsertHooks = append(datasetAfterInsertHooks, datasetHook)
	case boil.AfterSelectHook:
		datasetAfterSelectHooks = append(datasetAfterSelectHooks, datasetHook)
	case boil.AfterUpdateHook:
		datasetAfterUpdateHooks = append(datasetAfterUpdateHooks, datasetHook)
	case boil.AfterDeleteHook:
		datasetAfterDeleteHooks = append(datasetAfterDeleteHooks, datasetHook)
	case boil.AfterUpsertHook:
		datasetAfterUpsertHooks = append(datasetAfterUpsertHooks, datasetHook)
	}
}

// One returns a single dataset record from the query.
func (q datasetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dataset, error) {
	o := &Dataset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Datasets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dataset records from the query.
func (q datasetQuery) All(ctx context.Context, exec boil.ContextExecutor) (DatasetSlice, error) {
	var o []*Dataset

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dataset slice")
	}

	if len(datasetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dataset records in the query.
func (q datasetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Datasets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q datasetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Datasets exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *Dataset) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProjectID` = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`Projects`")

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (datasetL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataset interface{}, mods queries.Applicator) error {
	var slice []*Dataset
	var object *Dataset

	if singular {
		object = maybeDataset.(*Dataset)
	} else {
		slice = *maybeDataset.(*[]*Dataset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &datasetR{}
		}
		if !queries.IsNil(object.ProjectID) {
			args = append(args, object.ProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &datasetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProjectID) {
				args = append(args, obj.ProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Projects`), qm.WhereIn(`Projects.ProjectID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Projects")
	}

	if len(datasetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Datasets = append(foreign.R.Datasets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProjectID, foreign.ProjectID) {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Datasets = append(foreign.R.Datasets, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the dataset to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Datasets.
func (o *Dataset) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Datasets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project_id"}),
		strmangle.WhereClause("`", "`", 0, datasetPrimaryKeyColumns),
	)
	values := []interface{}{related.ProjectID, o.DatasetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProjectID, related.ProjectID)
	if o.R == nil {
		o.R = &datasetR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Datasets: DatasetSlice{o},
		}
	} else {
		related.R.Datasets = append(related.R.Datasets, o)
	}

	return nil
}

// RemoveProject relationship.
// Sets o.R.Project to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Dataset) RemoveProject(ctx context.Context, exec boil.ContextExecutor, related *Project) error {
	var err error

	queries.SetScanner(&o.ProjectID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Project_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Project = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Datasets {
		if queries.Equal(o.ProjectID, ri.ProjectID) {
			continue
		}

		ln := len(related.R.Datasets)
		if ln > 1 && i < ln-1 {
			related.R.Datasets[i] = related.R.Datasets[ln-1]
		}
		related.R.Datasets = related.R.Datasets[:ln-1]
		break
	}
	return nil
}

// Datasets retrieves all the records using an executor.
func Datasets(mods ...qm.QueryMod) datasetQuery {
	mods = append(mods, qm.From("`Datasets`"))
	return datasetQuery{NewQuery(mods...)}
}

// FindDataset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataset(ctx context.Context, exec boil.ContextExecutor, datasetID int, selectCols ...string) (*Dataset, error) {
	datasetObj := &Dataset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Datasets` where `DatasetID`=?", sel,
	)

	q := queries.Raw(query, datasetID)

	err := q.Bind(ctx, exec, datasetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Datasets")
	}

	return datasetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dataset) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Datasets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datasetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	datasetInsertCacheMut.RLock()
	cache, cached := datasetInsertCache[key]
	datasetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			datasetAllColumns,
			datasetColumnsWithDefault,
			datasetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(datasetType, datasetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(datasetType, datasetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Datasets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Datasets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Datasets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, datasetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Datasets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DatasetID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == datasetMapping["DatasetID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DatasetID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Datasets")
	}

CacheNoHooks:
	if !cached {
		datasetInsertCacheMut.Lock()
		datasetInsertCache[key] = cache
		datasetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dataset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dataset) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	datasetUpdateCacheMut.RLock()
	cache, cached := datasetUpdateCache[key]
	datasetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			datasetAllColumns,
			datasetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Datasets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Datasets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, datasetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(datasetType, datasetMapping, append(wl, datasetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Datasets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Datasets")
	}

	if !cached {
		datasetUpdateCacheMut.Lock()
		datasetUpdateCache[key] = cache
		datasetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q datasetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Datasets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Datasets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DatasetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datasetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Datasets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, datasetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataset")
	}
	return rowsAff, nil
}

var mySQLDatasetUniqueColumns = []string{
	"DatasetID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dataset) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Datasets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datasetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDatasetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	datasetUpsertCacheMut.RLock()
	cache, cached := datasetUpsertCache[key]
	datasetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			datasetAllColumns,
			datasetColumnsWithDefault,
			datasetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			datasetAllColumns,
			datasetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Datasets, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Datasets", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Datasets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(datasetType, datasetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(datasetType, datasetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Datasets")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DatasetID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == datasetMapping["DatasetID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(datasetType, datasetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Datasets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Datasets")
	}

CacheNoHooks:
	if !cached {
		datasetUpsertCacheMut.Lock()
		datasetUpsertCache[key] = cache
		datasetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dataset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dataset) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dataset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), datasetPrimaryKeyMapping)
	sql := "DELETE FROM `Datasets` WHERE `DatasetID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Datasets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Datasets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q datasetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no datasetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Datasets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Datasets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DatasetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(datasetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datasetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Datasets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, datasetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Datasets")
	}

	if len(datasetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dataset) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataset(ctx, exec, o.DatasetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DatasetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DatasetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datasetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Datasets`.* FROM `Datasets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, datasetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DatasetSlice")
	}

	*o = slice

	return nil
}

// DatasetExists checks if the Dataset row exists.
func DatasetExists(ctx context.Context, exec boil.ContextExecutor, datasetID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Datasets` where `DatasetID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, datasetID)
	}
	row := exec.QueryRowContext(ctx, sql, datasetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Datasets exists")
	}

	return exists, nil
}
