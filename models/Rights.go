// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Right is an object representing the database table.
type Right struct {
	RightID   int    `boil:"RightID" json:"RightID" toml:"RightID" yaml:"RightID"`
	RightName string `boil:"RightName" json:"RightName" toml:"RightName" yaml:"RightName"`

	R *rightR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rightL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RightColumns = struct {
	RightID   string
	RightName string
}{
	RightID:   "RightID",
	RightName: "RightName",
}

// Generated where

var RightWhere = struct {
	RightID   whereHelperint
	RightName whereHelperstring
}{
	RightID:   whereHelperint{field: "`Rights`.`RightID`"},
	RightName: whereHelperstring{field: "`Rights`.`RightName`"},
}

// RightRels is where relationship names are stored.
var RightRels = struct {
	RolesRoleIDRoles string
}{
	RolesRoleIDRoles: "RolesRoleIDRoles",
}

// rightR is where relationships are stored.
type rightR struct {
	RolesRoleIDRoles RoleSlice
}

// NewStruct creates a new relationship struct
func (*rightR) NewStruct() *rightR {
	return &rightR{}
}

// rightL is where Load methods for each relationship are stored.
type rightL struct{}

var (
	rightAllColumns            = []string{"RightID", "RightName"}
	rightColumnsWithoutDefault = []string{"RightName"}
	rightColumnsWithDefault    = []string{"RightID"}
	rightPrimaryKeyColumns     = []string{"RightID"}
)

type (
	// RightSlice is an alias for a slice of pointers to Right.
	// This should generally be used opposed to []Right.
	RightSlice []*Right
	// RightHook is the signature for custom Right hook methods
	RightHook func(context.Context, boil.ContextExecutor, *Right) error

	rightQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rightType                 = reflect.TypeOf(&Right{})
	rightMapping              = queries.MakeStructMapping(rightType)
	rightPrimaryKeyMapping, _ = queries.BindMapping(rightType, rightMapping, rightPrimaryKeyColumns)
	rightInsertCacheMut       sync.RWMutex
	rightInsertCache          = make(map[string]insertCache)
	rightUpdateCacheMut       sync.RWMutex
	rightUpdateCache          = make(map[string]updateCache)
	rightUpsertCacheMut       sync.RWMutex
	rightUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rightBeforeInsertHooks []RightHook
var rightBeforeUpdateHooks []RightHook
var rightBeforeDeleteHooks []RightHook
var rightBeforeUpsertHooks []RightHook

var rightAfterInsertHooks []RightHook
var rightAfterSelectHooks []RightHook
var rightAfterUpdateHooks []RightHook
var rightAfterDeleteHooks []RightHook
var rightAfterUpsertHooks []RightHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Right) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Right) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Right) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Right) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Right) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Right) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Right) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Right) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Right) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rightAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRightHook registers your hook function for all future operations.
func AddRightHook(hookPoint boil.HookPoint, rightHook RightHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rightBeforeInsertHooks = append(rightBeforeInsertHooks, rightHook)
	case boil.BeforeUpdateHook:
		rightBeforeUpdateHooks = append(rightBeforeUpdateHooks, rightHook)
	case boil.BeforeDeleteHook:
		rightBeforeDeleteHooks = append(rightBeforeDeleteHooks, rightHook)
	case boil.BeforeUpsertHook:
		rightBeforeUpsertHooks = append(rightBeforeUpsertHooks, rightHook)
	case boil.AfterInsertHook:
		rightAfterInsertHooks = append(rightAfterInsertHooks, rightHook)
	case boil.AfterSelectHook:
		rightAfterSelectHooks = append(rightAfterSelectHooks, rightHook)
	case boil.AfterUpdateHook:
		rightAfterUpdateHooks = append(rightAfterUpdateHooks, rightHook)
	case boil.AfterDeleteHook:
		rightAfterDeleteHooks = append(rightAfterDeleteHooks, rightHook)
	case boil.AfterUpsertHook:
		rightAfterUpsertHooks = append(rightAfterUpsertHooks, rightHook)
	}
}

// One returns a single right record from the query.
func (q rightQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Right, error) {
	o := &Right{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Rights")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Right records from the query.
func (q rightQuery) All(ctx context.Context, exec boil.ContextExecutor) (RightSlice, error) {
	var o []*Right

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Right slice")
	}

	if len(rightAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Right records in the query.
func (q rightQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Rights rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rightQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Rights exists")
	}

	return count > 0, nil
}

// RolesRoleIDRoles retrieves all the Role's Roles with an executor via RoleID column.
func (o *Right) RolesRoleIDRoles(mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`Roles_has_Rights` on `Roles`.`RoleID` = `Roles_has_Rights`.`Roles_RoleID`"),
		qm.Where("`Roles_has_Rights`.`Rights_RightID`=?", o.RightID),
	)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "`Roles`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Roles`.*"})
	}

	return query
}

// LoadRolesRoleIDRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rightL) LoadRolesRoleIDRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRight interface{}, mods queries.Applicator) error {
	var slice []*Right
	var object *Right

	if singular {
		object = maybeRight.(*Right)
	} else {
		slice = *maybeRight.(*[]*Right)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rightR{}
		}
		args = append(args, object.RightID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rightR{}
			}

			for _, a := range args {
				if a == obj.RightID {
					continue Outer
				}
			}

			args = append(args, obj.RightID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`Roles`.*, `a`.`Rights_RightID`"),
		qm.From("`Roles`"),
		qm.InnerJoin("`Roles_has_Rights` as `a` on `Roles`.`RoleID` = `a`.`Roles_RoleID`"),
		qm.WhereIn("`a`.`Rights_RightID` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Roles")
	}

	var resultSlice []*Role

	var localJoinCols []int
	for results.Next() {
		one := new(Role)
		var localJoinCol int

		err = results.Scan(&one.RoleID, &one.RoleName, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for Roles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice Roles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RolesRoleIDRoles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleR{}
			}
			foreign.R.RightsRightIDRights = append(foreign.R.RightsRightIDRights, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.RightID == localJoinCol {
				local.R.RolesRoleIDRoles = append(local.R.RolesRoleIDRoles, foreign)
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RightsRightIDRights = append(foreign.R.RightsRightIDRights, local)
				break
			}
		}
	}

	return nil
}

// AddRolesRoleIDRoles adds the given related objects to the existing relationships
// of the Right, optionally inserting them as new records.
// Appends related to o.R.RolesRoleIDRoles.
// Sets related.R.RightsRightIDRights appropriately.
func (o *Right) AddRolesRoleIDRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `Roles_has_Rights` (`Rights_RightID`, `Roles_RoleID`) values (?, ?)"
		values := []interface{}{o.RightID, rel.RoleID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &rightR{
			RolesRoleIDRoles: related,
		}
	} else {
		o.R.RolesRoleIDRoles = append(o.R.RolesRoleIDRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				RightsRightIDRights: RightSlice{o},
			}
		} else {
			rel.R.RightsRightIDRights = append(rel.R.RightsRightIDRights, o)
		}
	}
	return nil
}

// SetRolesRoleIDRoles removes all previously related items of the
// Right replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RightsRightIDRights's RolesRoleIDRoles accordingly.
// Replaces o.R.RolesRoleIDRoles with related.
// Sets related.R.RightsRightIDRights's RolesRoleIDRoles accordingly.
func (o *Right) SetRolesRoleIDRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	query := "delete from `Roles_has_Rights` where `Rights_RightID` = ?"
	values := []interface{}{o.RightID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRolesRoleIDRolesFromRightsRightIDRightsSlice(o, related)
	if o.R != nil {
		o.R.RolesRoleIDRoles = nil
	}
	return o.AddRolesRoleIDRoles(ctx, exec, insert, related...)
}

// RemoveRolesRoleIDRoles relationships from objects passed in.
// Removes related items from R.RolesRoleIDRoles (uses pointer comparison, removal does not keep order)
// Sets related.R.RightsRightIDRights.
func (o *Right) RemoveRolesRoleIDRoles(ctx context.Context, exec boil.ContextExecutor, related ...*Role) error {
	var err error
	query := fmt.Sprintf(
		"delete from `Roles_has_Rights` where `Rights_RightID` = ? and `Roles_RoleID` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.RightID}
	for _, rel := range related {
		values = append(values, rel.RoleID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRolesRoleIDRolesFromRightsRightIDRightsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RolesRoleIDRoles {
			if rel != ri {
				continue
			}

			ln := len(o.R.RolesRoleIDRoles)
			if ln > 1 && i < ln-1 {
				o.R.RolesRoleIDRoles[i] = o.R.RolesRoleIDRoles[ln-1]
			}
			o.R.RolesRoleIDRoles = o.R.RolesRoleIDRoles[:ln-1]
			break
		}
	}

	return nil
}

func removeRolesRoleIDRolesFromRightsRightIDRightsSlice(o *Right, related []*Role) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.RightsRightIDRights {
			if o.RightID != ri.RightID {
				continue
			}

			ln := len(rel.R.RightsRightIDRights)
			if ln > 1 && i < ln-1 {
				rel.R.RightsRightIDRights[i] = rel.R.RightsRightIDRights[ln-1]
			}
			rel.R.RightsRightIDRights = rel.R.RightsRightIDRights[:ln-1]
			break
		}
	}
}

// Rights retrieves all the records using an executor.
func Rights(mods ...qm.QueryMod) rightQuery {
	mods = append(mods, qm.From("`Rights`"))
	return rightQuery{NewQuery(mods...)}
}

// FindRight retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRight(ctx context.Context, exec boil.ContextExecutor, rightID int, selectCols ...string) (*Right, error) {
	rightObj := &Right{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Rights` where `RightID`=?", sel,
	)

	q := queries.Raw(query, rightID)

	err := q.Bind(ctx, exec, rightObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Rights")
	}

	return rightObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Right) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Rights provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rightColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rightInsertCacheMut.RLock()
	cache, cached := rightInsertCache[key]
	rightInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rightAllColumns,
			rightColumnsWithDefault,
			rightColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rightType, rightMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rightType, rightMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Rights` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Rights` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Rights` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rightPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Rights")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RightID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rightMapping["RightID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RightID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Rights")
	}

CacheNoHooks:
	if !cached {
		rightInsertCacheMut.Lock()
		rightInsertCache[key] = cache
		rightInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Right.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Right) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rightUpdateCacheMut.RLock()
	cache, cached := rightUpdateCache[key]
	rightUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rightAllColumns,
			rightPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Rights, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Rights` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rightPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rightType, rightMapping, append(wl, rightPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Rights row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Rights")
	}

	if !cached {
		rightUpdateCacheMut.Lock()
		rightUpdateCache[key] = cache
		rightUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rightQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Rights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Rights")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RightSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Rights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rightPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in right slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all right")
	}
	return rowsAff, nil
}

var mySQLRightUniqueColumns = []string{
	"RightID",
	"RightName",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Right) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Rights provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rightColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRightUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rightUpsertCacheMut.RLock()
	cache, cached := rightUpsertCache[key]
	rightUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rightAllColumns,
			rightColumnsWithDefault,
			rightColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rightAllColumns,
			rightPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Rights, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Rights", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Rights` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rightType, rightMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rightType, rightMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Rights")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RightID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rightMapping["RightID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rightType, rightMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Rights")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Rights")
	}

CacheNoHooks:
	if !cached {
		rightUpsertCacheMut.Lock()
		rightUpsertCache[key] = cache
		rightUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Right record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Right) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Right provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rightPrimaryKeyMapping)
	sql := "DELETE FROM `Rights` WHERE `RightID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Rights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Rights")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rightQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rightQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Rights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Rights")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RightSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rightBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Rights` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rightPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from right slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Rights")
	}

	if len(rightAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Right) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRight(ctx, exec, o.RightID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RightSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RightSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Rights`.* FROM `Rights` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rightPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RightSlice")
	}

	*o = slice

	return nil
}

// RightExists checks if the Right row exists.
func RightExists(ctx context.Context, exec boil.ContextExecutor, rightID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Rights` where `RightID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rightID)
	}
	row := exec.QueryRowContext(ctx, sql, rightID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Rights exists")
	}

	return exists, nil
}
