// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDatasets(t *testing.T) {
	t.Parallel()

	query := Datasets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDatasetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatasetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Datasets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatasetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DatasetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatasetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DatasetExists(ctx, tx, o.DatasetID)
	if err != nil {
		t.Errorf("Unable to check if Dataset exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DatasetExists to return true, but got false.")
	}
}

func testDatasetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	datasetFound, err := FindDataset(ctx, tx, o.DatasetID)
	if err != nil {
		t.Error(err)
	}

	if datasetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDatasetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Datasets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDatasetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Datasets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDatasetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	datasetOne := &Dataset{}
	datasetTwo := &Dataset{}
	if err = randomize.Struct(seed, datasetOne, datasetDBTypes, false, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}
	if err = randomize.Struct(seed, datasetTwo, datasetDBTypes, false, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = datasetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = datasetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Datasets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDatasetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	datasetOne := &Dataset{}
	datasetTwo := &Dataset{}
	if err = randomize.Struct(seed, datasetOne, datasetDBTypes, false, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}
	if err = randomize.Struct(seed, datasetTwo, datasetDBTypes, false, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = datasetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = datasetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func datasetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func datasetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dataset) error {
	*o = Dataset{}
	return nil
}

func testDatasetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Dataset{}
	o := &Dataset{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, datasetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dataset object: %s", err)
	}

	AddDatasetHook(boil.BeforeInsertHook, datasetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	datasetBeforeInsertHooks = []DatasetHook{}

	AddDatasetHook(boil.AfterInsertHook, datasetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	datasetAfterInsertHooks = []DatasetHook{}

	AddDatasetHook(boil.AfterSelectHook, datasetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	datasetAfterSelectHooks = []DatasetHook{}

	AddDatasetHook(boil.BeforeUpdateHook, datasetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	datasetBeforeUpdateHooks = []DatasetHook{}

	AddDatasetHook(boil.AfterUpdateHook, datasetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	datasetAfterUpdateHooks = []DatasetHook{}

	AddDatasetHook(boil.BeforeDeleteHook, datasetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	datasetBeforeDeleteHooks = []DatasetHook{}

	AddDatasetHook(boil.AfterDeleteHook, datasetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	datasetAfterDeleteHooks = []DatasetHook{}

	AddDatasetHook(boil.BeforeUpsertHook, datasetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	datasetBeforeUpsertHooks = []DatasetHook{}

	AddDatasetHook(boil.AfterUpsertHook, datasetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	datasetAfterUpsertHooks = []DatasetHook{}
}

func testDatasetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDatasetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(datasetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDatasetToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Dataset
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProjectID, foreign.ProjectID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ProjectID, foreign.ProjectID) {
		t.Errorf("want: %v, got %v", foreign.ProjectID, check.ProjectID)
	}

	slice := DatasetSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*Dataset)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDatasetToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dataset
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, datasetDBTypes, false, strmangle.SetComplement(datasetPrimaryKeyColumns, datasetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Datasets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProjectID, x.ProjectID) {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProjectID, x.ProjectID) {
			t.Error("foreign key was wrong value", a.ProjectID, x.ProjectID)
		}
	}
}

func testDatasetToOneRemoveOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dataset
	var b Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, datasetDBTypes, false, strmangle.SetComplement(datasetPrimaryKeyColumns, datasetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProject(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProject(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Project().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Project != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProjectID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Datasets) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDatasetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDatasetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DatasetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDatasetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Datasets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	datasetDBTypes = map[string]string{`DatasetID`: `int`, `Endpoint`: `varchar`, `Bucket`: `varchar`, `Key`: `varchar`, `ProjectID`: `varchar`}
	_              = bytes.MinRead
)

func testDatasetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(datasetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(datasetAllColumns) == len(datasetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDatasetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(datasetAllColumns) == len(datasetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dataset{}
	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, datasetDBTypes, true, datasetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(datasetAllColumns, datasetPrimaryKeyColumns) {
		fields = datasetAllColumns
	} else {
		fields = strmangle.SetComplement(
			datasetAllColumns,
			datasetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DatasetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDatasetsUpsert(t *testing.T) {
	t.Parallel()

	if len(datasetAllColumns) == len(datasetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDatasetUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Dataset{}
	if err = randomize.Struct(seed, &o, datasetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dataset: %s", err)
	}

	count, err := Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, datasetDBTypes, false, datasetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dataset struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dataset: %s", err)
	}

	count, err = Datasets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
