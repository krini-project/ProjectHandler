// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Workflow is an object representing the database table.
type Workflow struct {
	WorkflowID   int         `boil:"WorkflowID" json:"WorkflowID" toml:"WorkflowID" yaml:"WorkflowID"`
	Workflowname string      `boil:"Workflowname" json:"Workflowname" toml:"Workflowname" yaml:"Workflowname"`
	Version      null.String `boil:"Version" json:"Version,omitempty" toml:"Version" yaml:"Version,omitempty"`
	Link         string      `boil:"Link" json:"Link" toml:"Link" yaml:"Link"`
	ProjectID    string      `boil:"Project_id" json:"Project_id" toml:"Project_id" yaml:"Project_id"`

	R *workflowR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workflowL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkflowColumns = struct {
	WorkflowID   string
	Workflowname string
	Version      string
	Link         string
	ProjectID    string
}{
	WorkflowID:   "WorkflowID",
	Workflowname: "Workflowname",
	Version:      "Version",
	Link:         "Link",
	ProjectID:    "Project_id",
}

// Generated where

var WorkflowWhere = struct {
	WorkflowID   whereHelperint
	Workflowname whereHelperstring
	Version      whereHelpernull_String
	Link         whereHelperstring
	ProjectID    whereHelperstring
}{
	WorkflowID:   whereHelperint{field: "`Workflows`.`WorkflowID`"},
	Workflowname: whereHelperstring{field: "`Workflows`.`Workflowname`"},
	Version:      whereHelpernull_String{field: "`Workflows`.`Version`"},
	Link:         whereHelperstring{field: "`Workflows`.`Link`"},
	ProjectID:    whereHelperstring{field: "`Workflows`.`Project_id`"},
}

// WorkflowRels is where relationship names are stored.
var WorkflowRels = struct {
	Project      string
	Workflowruns string
}{
	Project:      "Project",
	Workflowruns: "Workflowruns",
}

// workflowR is where relationships are stored.
type workflowR struct {
	Project      *Project
	Workflowruns WorkflowrunSlice
}

// NewStruct creates a new relationship struct
func (*workflowR) NewStruct() *workflowR {
	return &workflowR{}
}

// workflowL is where Load methods for each relationship are stored.
type workflowL struct{}

var (
	workflowAllColumns            = []string{"WorkflowID", "Workflowname", "Version", "Link", "Project_id"}
	workflowColumnsWithoutDefault = []string{"Workflowname", "Version", "Link", "Project_id"}
	workflowColumnsWithDefault    = []string{"WorkflowID"}
	workflowPrimaryKeyColumns     = []string{"WorkflowID"}
)

type (
	// WorkflowSlice is an alias for a slice of pointers to Workflow.
	// This should generally be used opposed to []Workflow.
	WorkflowSlice []*Workflow
	// WorkflowHook is the signature for custom Workflow hook methods
	WorkflowHook func(context.Context, boil.ContextExecutor, *Workflow) error

	workflowQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workflowType                 = reflect.TypeOf(&Workflow{})
	workflowMapping              = queries.MakeStructMapping(workflowType)
	workflowPrimaryKeyMapping, _ = queries.BindMapping(workflowType, workflowMapping, workflowPrimaryKeyColumns)
	workflowInsertCacheMut       sync.RWMutex
	workflowInsertCache          = make(map[string]insertCache)
	workflowUpdateCacheMut       sync.RWMutex
	workflowUpdateCache          = make(map[string]updateCache)
	workflowUpsertCacheMut       sync.RWMutex
	workflowUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workflowBeforeInsertHooks []WorkflowHook
var workflowBeforeUpdateHooks []WorkflowHook
var workflowBeforeDeleteHooks []WorkflowHook
var workflowBeforeUpsertHooks []WorkflowHook

var workflowAfterInsertHooks []WorkflowHook
var workflowAfterSelectHooks []WorkflowHook
var workflowAfterUpdateHooks []WorkflowHook
var workflowAfterDeleteHooks []WorkflowHook
var workflowAfterUpsertHooks []WorkflowHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Workflow) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Workflow) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Workflow) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Workflow) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Workflow) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Workflow) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Workflow) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Workflow) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Workflow) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkflowHook registers your hook function for all future operations.
func AddWorkflowHook(hookPoint boil.HookPoint, workflowHook WorkflowHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		workflowBeforeInsertHooks = append(workflowBeforeInsertHooks, workflowHook)
	case boil.BeforeUpdateHook:
		workflowBeforeUpdateHooks = append(workflowBeforeUpdateHooks, workflowHook)
	case boil.BeforeDeleteHook:
		workflowBeforeDeleteHooks = append(workflowBeforeDeleteHooks, workflowHook)
	case boil.BeforeUpsertHook:
		workflowBeforeUpsertHooks = append(workflowBeforeUpsertHooks, workflowHook)
	case boil.AfterInsertHook:
		workflowAfterInsertHooks = append(workflowAfterInsertHooks, workflowHook)
	case boil.AfterSelectHook:
		workflowAfterSelectHooks = append(workflowAfterSelectHooks, workflowHook)
	case boil.AfterUpdateHook:
		workflowAfterUpdateHooks = append(workflowAfterUpdateHooks, workflowHook)
	case boil.AfterDeleteHook:
		workflowAfterDeleteHooks = append(workflowAfterDeleteHooks, workflowHook)
	case boil.AfterUpsertHook:
		workflowAfterUpsertHooks = append(workflowAfterUpsertHooks, workflowHook)
	}
}

// One returns a single workflow record from the query.
func (q workflowQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Workflow, error) {
	o := &Workflow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Workflows")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Workflow records from the query.
func (q workflowQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkflowSlice, error) {
	var o []*Workflow

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Workflow slice")
	}

	if len(workflowAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Workflow records in the query.
func (q workflowQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Workflows rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workflowQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Workflows exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *Workflow) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProjectID` = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`Projects`")

	return query
}

// Workflowruns retrieves all the Workflowrun's Workflowruns with an executor.
func (o *Workflow) Workflowruns(mods ...qm.QueryMod) workflowrunQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Workflowrun`.`Workflow_id`=?", o.WorkflowID),
	)

	query := Workflowruns(queryMods...)
	queries.SetFrom(query.Query, "`Workflowrun`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Workflowrun`.*"})
	}

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workflowL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkflow interface{}, mods queries.Applicator) error {
	var slice []*Workflow
	var object *Workflow

	if singular {
		object = maybeWorkflow.(*Workflow)
	} else {
		slice = *maybeWorkflow.(*[]*Workflow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workflowR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workflowR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Projects`), qm.WhereIn(`Projects.ProjectID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Projects")
	}

	if len(workflowAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Workflows = append(foreign.R.Workflows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ProjectID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Workflows = append(foreign.R.Workflows, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkflowruns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workflowL) LoadWorkflowruns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkflow interface{}, mods queries.Applicator) error {
	var slice []*Workflow
	var object *Workflow

	if singular {
		object = maybeWorkflow.(*Workflow)
	} else {
		slice = *maybeWorkflow.(*[]*Workflow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workflowR{}
		}
		args = append(args, object.WorkflowID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workflowR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WorkflowID) {
					continue Outer
				}
			}

			args = append(args, obj.WorkflowID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Workflowrun`), qm.WhereIn(`Workflowrun.Workflow_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workflowrun")
	}

	var resultSlice []*Workflowrun
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workflowrun")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Workflowrun")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Workflowrun")
	}

	if len(workflowrunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Workflowruns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &workflowrunR{}
			}
			foreign.R.Workflow = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.WorkflowID, foreign.WorkflowID) {
				local.R.Workflowruns = append(local.R.Workflowruns, foreign)
				if foreign.R == nil {
					foreign.R = &workflowrunR{}
				}
				foreign.R.Workflow = local
				break
			}
		}
	}

	return nil
}

// SetProject of the workflow to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Workflows.
func (o *Workflow) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Workflows` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project_id"}),
		strmangle.WhereClause("`", "`", 0, workflowPrimaryKeyColumns),
	)
	values := []interface{}{related.ProjectID, o.WorkflowID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ProjectID
	if o.R == nil {
		o.R = &workflowR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Workflows: WorkflowSlice{o},
		}
	} else {
		related.R.Workflows = append(related.R.Workflows, o)
	}

	return nil
}

// AddWorkflowruns adds the given related objects to the existing relationships
// of the Workflow, optionally inserting them as new records.
// Appends related to o.R.Workflowruns.
// Sets related.R.Workflow appropriately.
func (o *Workflow) AddWorkflowruns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Workflowrun) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WorkflowID, o.WorkflowID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Workflowrun` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Workflow_id"}),
				strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns),
			)
			values := []interface{}{o.WorkflowID, rel.WorkflowrunID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WorkflowID, o.WorkflowID)
		}
	}

	if o.R == nil {
		o.R = &workflowR{
			Workflowruns: related,
		}
	} else {
		o.R.Workflowruns = append(o.R.Workflowruns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &workflowrunR{
				Workflow: o,
			}
		} else {
			rel.R.Workflow = o
		}
	}
	return nil
}

// SetWorkflowruns removes all previously related items of the
// Workflow replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Workflow's Workflowruns accordingly.
// Replaces o.R.Workflowruns with related.
// Sets related.R.Workflow's Workflowruns accordingly.
func (o *Workflow) SetWorkflowruns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Workflowrun) error {
	query := "update `Workflowrun` set `Workflow_id` = null where `Workflow_id` = ?"
	values := []interface{}{o.WorkflowID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Workflowruns {
			queries.SetScanner(&rel.WorkflowID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Workflow = nil
		}

		o.R.Workflowruns = nil
	}
	return o.AddWorkflowruns(ctx, exec, insert, related...)
}

// RemoveWorkflowruns relationships from objects passed in.
// Removes related items from R.Workflowruns (uses pointer comparison, removal does not keep order)
// Sets related.R.Workflow.
func (o *Workflow) RemoveWorkflowruns(ctx context.Context, exec boil.ContextExecutor, related ...*Workflowrun) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WorkflowID, nil)
		if rel.R != nil {
			rel.R.Workflow = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("Workflow_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Workflowruns {
			if rel != ri {
				continue
			}

			ln := len(o.R.Workflowruns)
			if ln > 1 && i < ln-1 {
				o.R.Workflowruns[i] = o.R.Workflowruns[ln-1]
			}
			o.R.Workflowruns = o.R.Workflowruns[:ln-1]
			break
		}
	}

	return nil
}

// Workflows retrieves all the records using an executor.
func Workflows(mods ...qm.QueryMod) workflowQuery {
	mods = append(mods, qm.From("`Workflows`"))
	return workflowQuery{NewQuery(mods...)}
}

// FindWorkflow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkflow(ctx context.Context, exec boil.ContextExecutor, workflowID int, selectCols ...string) (*Workflow, error) {
	workflowObj := &Workflow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Workflows` where `WorkflowID`=?", sel,
	)

	q := queries.Raw(query, workflowID)

	err := q.Bind(ctx, exec, workflowObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Workflows")
	}

	return workflowObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Workflow) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Workflows provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workflowColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workflowInsertCacheMut.RLock()
	cache, cached := workflowInsertCache[key]
	workflowInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workflowAllColumns,
			workflowColumnsWithDefault,
			workflowColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workflowType, workflowMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workflowType, workflowMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Workflows` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Workflows` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Workflows` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, workflowPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Workflows")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.WorkflowID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workflowMapping["WorkflowID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WorkflowID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Workflows")
	}

CacheNoHooks:
	if !cached {
		workflowInsertCacheMut.Lock()
		workflowInsertCache[key] = cache
		workflowInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Workflow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Workflow) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workflowUpdateCacheMut.RLock()
	cache, cached := workflowUpdateCache[key]
	workflowUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workflowAllColumns,
			workflowPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Workflows, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Workflows` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, workflowPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workflowType, workflowMapping, append(wl, workflowPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Workflows row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Workflows")
	}

	if !cached {
		workflowUpdateCacheMut.Lock()
		workflowUpdateCache[key] = cache
		workflowUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workflowQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Workflows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Workflows")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkflowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workflowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Workflows` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workflowPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in workflow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all workflow")
	}
	return rowsAff, nil
}

var mySQLWorkflowUniqueColumns = []string{
	"WorkflowID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Workflow) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Workflows provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workflowColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWorkflowUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workflowUpsertCacheMut.RLock()
	cache, cached := workflowUpsertCache[key]
	workflowUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workflowAllColumns,
			workflowColumnsWithDefault,
			workflowColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			workflowAllColumns,
			workflowPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Workflows, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Workflows", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Workflows` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(workflowType, workflowMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workflowType, workflowMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Workflows")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.WorkflowID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workflowMapping["WorkflowID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(workflowType, workflowMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Workflows")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Workflows")
	}

CacheNoHooks:
	if !cached {
		workflowUpsertCacheMut.Lock()
		workflowUpsertCache[key] = cache
		workflowUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Workflow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Workflow) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Workflow provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workflowPrimaryKeyMapping)
	sql := "DELETE FROM `Workflows` WHERE `WorkflowID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Workflows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Workflows")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workflowQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workflowQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Workflows")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Workflows")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkflowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workflowBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workflowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Workflows` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workflowPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workflow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Workflows")
	}

	if len(workflowAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Workflow) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkflow(ctx, exec, o.WorkflowID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkflowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkflowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workflowPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Workflows`.* FROM `Workflows` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workflowPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkflowSlice")
	}

	*o = slice

	return nil
}

// WorkflowExists checks if the Workflow row exists.
func WorkflowExists(ctx context.Context, exec boil.ContextExecutor, workflowID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Workflows` where `WorkflowID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, workflowID)
	}
	row := exec.QueryRowContext(ctx, sql, workflowID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Workflows exists")
	}

	return exists, nil
}
