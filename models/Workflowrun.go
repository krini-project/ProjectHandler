// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Workflowrun is an object representing the database table.
type Workflowrun struct {
	WorkflowrunID int         `boil:"WorkflowrunID" json:"WorkflowrunID" toml:"WorkflowrunID" yaml:"WorkflowrunID"`
	WorkflowID    null.Int    `boil:"Workflow_id" json:"Workflow_id,omitempty" toml:"Workflow_id" yaml:"Workflow_id,omitempty"`
	ProjectID     null.String `boil:"Project_id" json:"Project_id,omitempty" toml:"Project_id" yaml:"Project_id,omitempty"`
	Starttime     null.Time   `boil:"Starttime" json:"Starttime,omitempty" toml:"Starttime" yaml:"Starttime,omitempty"`
	Endtime       null.Time   `boil:"Endtime" json:"Endtime,omitempty" toml:"Endtime" yaml:"Endtime,omitempty"`
	State         null.String `boil:"State" json:"State,omitempty" toml:"State" yaml:"State,omitempty"`
	HasError      null.Int8   `boil:"HasError" json:"HasError,omitempty" toml:"HasError" yaml:"HasError,omitempty"`
	HasResult     null.Int8   `boil:"HasResult" json:"HasResult,omitempty" toml:"HasResult" yaml:"HasResult,omitempty"`
	Error         null.String `boil:"Error" json:"Error,omitempty" toml:"Error" yaml:"Error,omitempty"`
	Bucket        null.String `boil:"Bucket" json:"Bucket,omitempty" toml:"Bucket" yaml:"Bucket,omitempty"`
	Key           null.String `boil:"Key" json:"Key,omitempty" toml:"Key" yaml:"Key,omitempty"`
	WESEndpointID null.Int    `boil:"WES_Endpoint_id" json:"WES_Endpoint_id,omitempty" toml:"WES_Endpoint_id" yaml:"WES_Endpoint_id,omitempty"`

	R *workflowrunR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workflowrunL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkflowrunColumns = struct {
	WorkflowrunID string
	WorkflowID    string
	ProjectID     string
	Starttime     string
	Endtime       string
	State         string
	HasError      string
	HasResult     string
	Error         string
	Bucket        string
	Key           string
	WESEndpointID string
}{
	WorkflowrunID: "WorkflowrunID",
	WorkflowID:    "Workflow_id",
	ProjectID:     "Project_id",
	Starttime:     "Starttime",
	Endtime:       "Endtime",
	State:         "State",
	HasError:      "HasError",
	HasResult:     "HasResult",
	Error:         "Error",
	Bucket:        "Bucket",
	Key:           "Key",
	WESEndpointID: "WES_Endpoint_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int8 struct{ field string }

func (w whereHelpernull_Int8) EQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int8) NEQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int8) LT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int8) LTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int8) GT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int8) GTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var WorkflowrunWhere = struct {
	WorkflowrunID whereHelperint
	WorkflowID    whereHelpernull_Int
	ProjectID     whereHelpernull_String
	Starttime     whereHelpernull_Time
	Endtime       whereHelpernull_Time
	State         whereHelpernull_String
	HasError      whereHelpernull_Int8
	HasResult     whereHelpernull_Int8
	Error         whereHelpernull_String
	Bucket        whereHelpernull_String
	Key           whereHelpernull_String
	WESEndpointID whereHelpernull_Int
}{
	WorkflowrunID: whereHelperint{field: "`Workflowrun`.`WorkflowrunID`"},
	WorkflowID:    whereHelpernull_Int{field: "`Workflowrun`.`Workflow_id`"},
	ProjectID:     whereHelpernull_String{field: "`Workflowrun`.`Project_id`"},
	Starttime:     whereHelpernull_Time{field: "`Workflowrun`.`Starttime`"},
	Endtime:       whereHelpernull_Time{field: "`Workflowrun`.`Endtime`"},
	State:         whereHelpernull_String{field: "`Workflowrun`.`State`"},
	HasError:      whereHelpernull_Int8{field: "`Workflowrun`.`HasError`"},
	HasResult:     whereHelpernull_Int8{field: "`Workflowrun`.`HasResult`"},
	Error:         whereHelpernull_String{field: "`Workflowrun`.`Error`"},
	Bucket:        whereHelpernull_String{field: "`Workflowrun`.`Bucket`"},
	Key:           whereHelpernull_String{field: "`Workflowrun`.`Key`"},
	WESEndpointID: whereHelpernull_Int{field: "`Workflowrun`.`WES_Endpoint_id`"},
}

// WorkflowrunRels is where relationship names are stored.
var WorkflowrunRels = struct {
	Project     string
	WESEndpoint string
	Workflow    string
}{
	Project:     "Project",
	WESEndpoint: "WESEndpoint",
	Workflow:    "Workflow",
}

// workflowrunR is where relationships are stored.
type workflowrunR struct {
	Project     *Project
	WESEndpoint *WESEndpoint
	Workflow    *Workflow
}

// NewStruct creates a new relationship struct
func (*workflowrunR) NewStruct() *workflowrunR {
	return &workflowrunR{}
}

// workflowrunL is where Load methods for each relationship are stored.
type workflowrunL struct{}

var (
	workflowrunAllColumns            = []string{"WorkflowrunID", "Workflow_id", "Project_id", "Starttime", "Endtime", "State", "HasError", "HasResult", "Error", "Bucket", "Key", "WES_Endpoint_id"}
	workflowrunColumnsWithoutDefault = []string{"Workflow_id", "Project_id", "Starttime", "Endtime", "State", "HasError", "HasResult", "Error", "Bucket", "Key", "WES_Endpoint_id"}
	workflowrunColumnsWithDefault    = []string{"WorkflowrunID"}
	workflowrunPrimaryKeyColumns     = []string{"WorkflowrunID"}
)

type (
	// WorkflowrunSlice is an alias for a slice of pointers to Workflowrun.
	// This should generally be used opposed to []Workflowrun.
	WorkflowrunSlice []*Workflowrun
	// WorkflowrunHook is the signature for custom Workflowrun hook methods
	WorkflowrunHook func(context.Context, boil.ContextExecutor, *Workflowrun) error

	workflowrunQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workflowrunType                 = reflect.TypeOf(&Workflowrun{})
	workflowrunMapping              = queries.MakeStructMapping(workflowrunType)
	workflowrunPrimaryKeyMapping, _ = queries.BindMapping(workflowrunType, workflowrunMapping, workflowrunPrimaryKeyColumns)
	workflowrunInsertCacheMut       sync.RWMutex
	workflowrunInsertCache          = make(map[string]insertCache)
	workflowrunUpdateCacheMut       sync.RWMutex
	workflowrunUpdateCache          = make(map[string]updateCache)
	workflowrunUpsertCacheMut       sync.RWMutex
	workflowrunUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workflowrunBeforeInsertHooks []WorkflowrunHook
var workflowrunBeforeUpdateHooks []WorkflowrunHook
var workflowrunBeforeDeleteHooks []WorkflowrunHook
var workflowrunBeforeUpsertHooks []WorkflowrunHook

var workflowrunAfterInsertHooks []WorkflowrunHook
var workflowrunAfterSelectHooks []WorkflowrunHook
var workflowrunAfterUpdateHooks []WorkflowrunHook
var workflowrunAfterDeleteHooks []WorkflowrunHook
var workflowrunAfterUpsertHooks []WorkflowrunHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Workflowrun) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Workflowrun) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Workflowrun) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Workflowrun) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Workflowrun) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Workflowrun) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Workflowrun) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Workflowrun) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Workflowrun) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workflowrunAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkflowrunHook registers your hook function for all future operations.
func AddWorkflowrunHook(hookPoint boil.HookPoint, workflowrunHook WorkflowrunHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		workflowrunBeforeInsertHooks = append(workflowrunBeforeInsertHooks, workflowrunHook)
	case boil.BeforeUpdateHook:
		workflowrunBeforeUpdateHooks = append(workflowrunBeforeUpdateHooks, workflowrunHook)
	case boil.BeforeDeleteHook:
		workflowrunBeforeDeleteHooks = append(workflowrunBeforeDeleteHooks, workflowrunHook)
	case boil.BeforeUpsertHook:
		workflowrunBeforeUpsertHooks = append(workflowrunBeforeUpsertHooks, workflowrunHook)
	case boil.AfterInsertHook:
		workflowrunAfterInsertHooks = append(workflowrunAfterInsertHooks, workflowrunHook)
	case boil.AfterSelectHook:
		workflowrunAfterSelectHooks = append(workflowrunAfterSelectHooks, workflowrunHook)
	case boil.AfterUpdateHook:
		workflowrunAfterUpdateHooks = append(workflowrunAfterUpdateHooks, workflowrunHook)
	case boil.AfterDeleteHook:
		workflowrunAfterDeleteHooks = append(workflowrunAfterDeleteHooks, workflowrunHook)
	case boil.AfterUpsertHook:
		workflowrunAfterUpsertHooks = append(workflowrunAfterUpsertHooks, workflowrunHook)
	}
}

// One returns a single workflowrun record from the query.
func (q workflowrunQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Workflowrun, error) {
	o := &Workflowrun{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Workflowrun")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Workflowrun records from the query.
func (q workflowrunQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkflowrunSlice, error) {
	var o []*Workflowrun

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Workflowrun slice")
	}

	if len(workflowrunAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Workflowrun records in the query.
func (q workflowrunQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Workflowrun rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workflowrunQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Workflowrun exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *Workflowrun) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProjectID` = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`Projects`")

	return query
}

// WESEndpoint pointed to by the foreign key.
func (o *Workflowrun) WESEndpoint(mods ...qm.QueryMod) wESEndpointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ID` = ?", o.WESEndpointID),
	}

	queryMods = append(queryMods, mods...)

	query := WESEndpoints(queryMods...)
	queries.SetFrom(query.Query, "`WESEndpoints`")

	return query
}

// Workflow pointed to by the foreign key.
func (o *Workflowrun) Workflow(mods ...qm.QueryMod) workflowQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkflowID` = ?", o.WorkflowID),
	}

	queryMods = append(queryMods, mods...)

	query := Workflows(queryMods...)
	queries.SetFrom(query.Query, "`Workflows`")

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workflowrunL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkflowrun interface{}, mods queries.Applicator) error {
	var slice []*Workflowrun
	var object *Workflowrun

	if singular {
		object = maybeWorkflowrun.(*Workflowrun)
	} else {
		slice = *maybeWorkflowrun.(*[]*Workflowrun)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workflowrunR{}
		}
		if !queries.IsNil(object.ProjectID) {
			args = append(args, object.ProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workflowrunR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProjectID) {
				args = append(args, obj.ProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Projects`), qm.WhereIn(`Projects.ProjectID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Projects")
	}

	if len(workflowrunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Workflowruns = append(foreign.R.Workflowruns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProjectID, foreign.ProjectID) {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Workflowruns = append(foreign.R.Workflowruns, local)
				break
			}
		}
	}

	return nil
}

// LoadWESEndpoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workflowrunL) LoadWESEndpoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkflowrun interface{}, mods queries.Applicator) error {
	var slice []*Workflowrun
	var object *Workflowrun

	if singular {
		object = maybeWorkflowrun.(*Workflowrun)
	} else {
		slice = *maybeWorkflowrun.(*[]*Workflowrun)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workflowrunR{}
		}
		if !queries.IsNil(object.WESEndpointID) {
			args = append(args, object.WESEndpointID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workflowrunR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WESEndpointID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WESEndpointID) {
				args = append(args, obj.WESEndpointID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`WESEndpoints`), qm.WhereIn(`WESEndpoints.ID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load WESEndpoint")
	}

	var resultSlice []*WESEndpoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice WESEndpoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for WESEndpoints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for WESEndpoints")
	}

	if len(workflowrunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WESEndpoint = foreign
		if foreign.R == nil {
			foreign.R = &wESEndpointR{}
		}
		foreign.R.WESEndpointWorkflowruns = append(foreign.R.WESEndpointWorkflowruns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WESEndpointID, foreign.ID) {
				local.R.WESEndpoint = foreign
				if foreign.R == nil {
					foreign.R = &wESEndpointR{}
				}
				foreign.R.WESEndpointWorkflowruns = append(foreign.R.WESEndpointWorkflowruns, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkflow allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workflowrunL) LoadWorkflow(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkflowrun interface{}, mods queries.Applicator) error {
	var slice []*Workflowrun
	var object *Workflowrun

	if singular {
		object = maybeWorkflowrun.(*Workflowrun)
	} else {
		slice = *maybeWorkflowrun.(*[]*Workflowrun)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workflowrunR{}
		}
		if !queries.IsNil(object.WorkflowID) {
			args = append(args, object.WorkflowID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workflowrunR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WorkflowID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WorkflowID) {
				args = append(args, obj.WorkflowID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Workflows`), qm.WhereIn(`Workflows.WorkflowID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workflow")
	}

	var resultSlice []*Workflow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workflow")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Workflows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Workflows")
	}

	if len(workflowrunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Workflow = foreign
		if foreign.R == nil {
			foreign.R = &workflowR{}
		}
		foreign.R.Workflowruns = append(foreign.R.Workflowruns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WorkflowID, foreign.WorkflowID) {
				local.R.Workflow = foreign
				if foreign.R == nil {
					foreign.R = &workflowR{}
				}
				foreign.R.Workflowruns = append(foreign.R.Workflowruns, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the workflowrun to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Workflowruns.
func (o *Workflowrun) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Workflowrun` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project_id"}),
		strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns),
	)
	values := []interface{}{related.ProjectID, o.WorkflowrunID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProjectID, related.ProjectID)
	if o.R == nil {
		o.R = &workflowrunR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Workflowruns: WorkflowrunSlice{o},
		}
	} else {
		related.R.Workflowruns = append(related.R.Workflowruns, o)
	}

	return nil
}

// RemoveProject relationship.
// Sets o.R.Project to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Workflowrun) RemoveProject(ctx context.Context, exec boil.ContextExecutor, related *Project) error {
	var err error

	queries.SetScanner(&o.ProjectID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Project_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Project = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Workflowruns {
		if queries.Equal(o.ProjectID, ri.ProjectID) {
			continue
		}

		ln := len(related.R.Workflowruns)
		if ln > 1 && i < ln-1 {
			related.R.Workflowruns[i] = related.R.Workflowruns[ln-1]
		}
		related.R.Workflowruns = related.R.Workflowruns[:ln-1]
		break
	}
	return nil
}

// SetWESEndpoint of the workflowrun to the related item.
// Sets o.R.WESEndpoint to related.
// Adds o to related.R.WESEndpointWorkflowruns.
func (o *Workflowrun) SetWESEndpoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *WESEndpoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Workflowrun` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WES_Endpoint_id"}),
		strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.WorkflowrunID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WESEndpointID, related.ID)
	if o.R == nil {
		o.R = &workflowrunR{
			WESEndpoint: related,
		}
	} else {
		o.R.WESEndpoint = related
	}

	if related.R == nil {
		related.R = &wESEndpointR{
			WESEndpointWorkflowruns: WorkflowrunSlice{o},
		}
	} else {
		related.R.WESEndpointWorkflowruns = append(related.R.WESEndpointWorkflowruns, o)
	}

	return nil
}

// RemoveWESEndpoint relationship.
// Sets o.R.WESEndpoint to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Workflowrun) RemoveWESEndpoint(ctx context.Context, exec boil.ContextExecutor, related *WESEndpoint) error {
	var err error

	queries.SetScanner(&o.WESEndpointID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("WES_Endpoint_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WESEndpoint = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WESEndpointWorkflowruns {
		if queries.Equal(o.WESEndpointID, ri.WESEndpointID) {
			continue
		}

		ln := len(related.R.WESEndpointWorkflowruns)
		if ln > 1 && i < ln-1 {
			related.R.WESEndpointWorkflowruns[i] = related.R.WESEndpointWorkflowruns[ln-1]
		}
		related.R.WESEndpointWorkflowruns = related.R.WESEndpointWorkflowruns[:ln-1]
		break
	}
	return nil
}

// SetWorkflow of the workflowrun to the related item.
// Sets o.R.Workflow to related.
// Adds o to related.R.Workflowruns.
func (o *Workflowrun) SetWorkflow(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Workflow) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Workflowrun` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Workflow_id"}),
		strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkflowID, o.WorkflowrunID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WorkflowID, related.WorkflowID)
	if o.R == nil {
		o.R = &workflowrunR{
			Workflow: related,
		}
	} else {
		o.R.Workflow = related
	}

	if related.R == nil {
		related.R = &workflowR{
			Workflowruns: WorkflowrunSlice{o},
		}
	} else {
		related.R.Workflowruns = append(related.R.Workflowruns, o)
	}

	return nil
}

// RemoveWorkflow relationship.
// Sets o.R.Workflow to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Workflowrun) RemoveWorkflow(ctx context.Context, exec boil.ContextExecutor, related *Workflow) error {
	var err error

	queries.SetScanner(&o.WorkflowID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Workflow_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Workflow = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Workflowruns {
		if queries.Equal(o.WorkflowID, ri.WorkflowID) {
			continue
		}

		ln := len(related.R.Workflowruns)
		if ln > 1 && i < ln-1 {
			related.R.Workflowruns[i] = related.R.Workflowruns[ln-1]
		}
		related.R.Workflowruns = related.R.Workflowruns[:ln-1]
		break
	}
	return nil
}

// Workflowruns retrieves all the records using an executor.
func Workflowruns(mods ...qm.QueryMod) workflowrunQuery {
	mods = append(mods, qm.From("`Workflowrun`"))
	return workflowrunQuery{NewQuery(mods...)}
}

// FindWorkflowrun retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkflowrun(ctx context.Context, exec boil.ContextExecutor, workflowrunID int, selectCols ...string) (*Workflowrun, error) {
	workflowrunObj := &Workflowrun{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Workflowrun` where `WorkflowrunID`=?", sel,
	)

	q := queries.Raw(query, workflowrunID)

	err := q.Bind(ctx, exec, workflowrunObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Workflowrun")
	}

	return workflowrunObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Workflowrun) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Workflowrun provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workflowrunColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workflowrunInsertCacheMut.RLock()
	cache, cached := workflowrunInsertCache[key]
	workflowrunInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workflowrunAllColumns,
			workflowrunColumnsWithDefault,
			workflowrunColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workflowrunType, workflowrunMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workflowrunType, workflowrunMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Workflowrun` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Workflowrun` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Workflowrun` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Workflowrun")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.WorkflowrunID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workflowrunMapping["WorkflowrunID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WorkflowrunID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Workflowrun")
	}

CacheNoHooks:
	if !cached {
		workflowrunInsertCacheMut.Lock()
		workflowrunInsertCache[key] = cache
		workflowrunInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Workflowrun.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Workflowrun) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workflowrunUpdateCacheMut.RLock()
	cache, cached := workflowrunUpdateCache[key]
	workflowrunUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workflowrunAllColumns,
			workflowrunPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Workflowrun, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Workflowrun` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workflowrunType, workflowrunMapping, append(wl, workflowrunPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Workflowrun row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Workflowrun")
	}

	if !cached {
		workflowrunUpdateCacheMut.Lock()
		workflowrunUpdateCache[key] = cache
		workflowrunUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workflowrunQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Workflowrun")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Workflowrun")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkflowrunSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workflowrunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Workflowrun` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workflowrunPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in workflowrun slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all workflowrun")
	}
	return rowsAff, nil
}

var mySQLWorkflowrunUniqueColumns = []string{
	"WorkflowrunID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Workflowrun) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Workflowrun provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workflowrunColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWorkflowrunUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workflowrunUpsertCacheMut.RLock()
	cache, cached := workflowrunUpsertCache[key]
	workflowrunUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workflowrunAllColumns,
			workflowrunColumnsWithDefault,
			workflowrunColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			workflowrunAllColumns,
			workflowrunPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Workflowrun, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Workflowrun", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Workflowrun` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(workflowrunType, workflowrunMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workflowrunType, workflowrunMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Workflowrun")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.WorkflowrunID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workflowrunMapping["WorkflowrunID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(workflowrunType, workflowrunMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Workflowrun")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Workflowrun")
	}

CacheNoHooks:
	if !cached {
		workflowrunUpsertCacheMut.Lock()
		workflowrunUpsertCache[key] = cache
		workflowrunUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Workflowrun record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Workflowrun) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Workflowrun provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workflowrunPrimaryKeyMapping)
	sql := "DELETE FROM `Workflowrun` WHERE `WorkflowrunID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Workflowrun")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Workflowrun")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workflowrunQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workflowrunQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Workflowrun")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Workflowrun")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkflowrunSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workflowrunBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workflowrunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Workflowrun` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workflowrunPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workflowrun slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Workflowrun")
	}

	if len(workflowrunAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Workflowrun) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkflowrun(ctx, exec, o.WorkflowrunID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkflowrunSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkflowrunSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workflowrunPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Workflowrun`.* FROM `Workflowrun` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workflowrunPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkflowrunSlice")
	}

	*o = slice

	return nil
}

// WorkflowrunExists checks if the Workflowrun row exists.
func WorkflowrunExists(ctx context.Context, exec boil.ContextExecutor, workflowrunID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Workflowrun` where `WorkflowrunID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, workflowrunID)
	}
	row := exec.QueryRowContext(ctx, sql, workflowrunID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Workflowrun exists")
	}

	return exists, nil
}
