// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ProjectUser is an object representing the database table.
type ProjectUser struct {
	UserID            string `boil:"User_id" json:"User_id" toml:"User_id" yaml:"User_id"`
	RoleID            int    `boil:"Role_id" json:"Role_id" toml:"Role_id" yaml:"Role_id"`
	ProjectsProjectID string `boil:"Projects_Project_id" json:"Projects_Project_id" toml:"Projects_Project_id" yaml:"Projects_Project_id"`

	R *projectUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectUserColumns = struct {
	UserID            string
	RoleID            string
	ProjectsProjectID string
}{
	UserID:            "User_id",
	RoleID:            "Role_id",
	ProjectsProjectID: "Projects_Project_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var ProjectUserWhere = struct {
	UserID            whereHelperstring
	RoleID            whereHelperint
	ProjectsProjectID whereHelperstring
}{
	UserID:            whereHelperstring{field: "`ProjectUser`.`User_id`"},
	RoleID:            whereHelperint{field: "`ProjectUser`.`Role_id`"},
	ProjectsProjectID: whereHelperstring{field: "`ProjectUser`.`Projects_Project_id`"},
}

// ProjectUserRels is where relationship names are stored.
var ProjectUserRels = struct {
	ProjectsProject string
	Role            string
	User            string
}{
	ProjectsProject: "ProjectsProject",
	Role:            "Role",
	User:            "User",
}

// projectUserR is where relationships are stored.
type projectUserR struct {
	ProjectsProject *Project
	Role            *Role
	User            *User
}

// NewStruct creates a new relationship struct
func (*projectUserR) NewStruct() *projectUserR {
	return &projectUserR{}
}

// projectUserL is where Load methods for each relationship are stored.
type projectUserL struct{}

var (
	projectUserAllColumns            = []string{"User_id", "Role_id", "Projects_Project_id"}
	projectUserColumnsWithoutDefault = []string{"User_id", "Role_id", "Projects_Project_id"}
	projectUserColumnsWithDefault    = []string{}
	projectUserPrimaryKeyColumns     = []string{"Role_id", "User_id"}
)

type (
	// ProjectUserSlice is an alias for a slice of pointers to ProjectUser.
	// This should generally be used opposed to []ProjectUser.
	ProjectUserSlice []*ProjectUser
	// ProjectUserHook is the signature for custom ProjectUser hook methods
	ProjectUserHook func(context.Context, boil.ContextExecutor, *ProjectUser) error

	projectUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectUserType                 = reflect.TypeOf(&ProjectUser{})
	projectUserMapping              = queries.MakeStructMapping(projectUserType)
	projectUserPrimaryKeyMapping, _ = queries.BindMapping(projectUserType, projectUserMapping, projectUserPrimaryKeyColumns)
	projectUserInsertCacheMut       sync.RWMutex
	projectUserInsertCache          = make(map[string]insertCache)
	projectUserUpdateCacheMut       sync.RWMutex
	projectUserUpdateCache          = make(map[string]updateCache)
	projectUserUpsertCacheMut       sync.RWMutex
	projectUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectUserBeforeInsertHooks []ProjectUserHook
var projectUserBeforeUpdateHooks []ProjectUserHook
var projectUserBeforeDeleteHooks []ProjectUserHook
var projectUserBeforeUpsertHooks []ProjectUserHook

var projectUserAfterInsertHooks []ProjectUserHook
var projectUserAfterSelectHooks []ProjectUserHook
var projectUserAfterUpdateHooks []ProjectUserHook
var projectUserAfterDeleteHooks []ProjectUserHook
var projectUserAfterUpsertHooks []ProjectUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProjectUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProjectUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProjectUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProjectUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProjectUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProjectUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProjectUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProjectUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProjectUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectUserHook registers your hook function for all future operations.
func AddProjectUserHook(hookPoint boil.HookPoint, projectUserHook ProjectUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		projectUserBeforeInsertHooks = append(projectUserBeforeInsertHooks, projectUserHook)
	case boil.BeforeUpdateHook:
		projectUserBeforeUpdateHooks = append(projectUserBeforeUpdateHooks, projectUserHook)
	case boil.BeforeDeleteHook:
		projectUserBeforeDeleteHooks = append(projectUserBeforeDeleteHooks, projectUserHook)
	case boil.BeforeUpsertHook:
		projectUserBeforeUpsertHooks = append(projectUserBeforeUpsertHooks, projectUserHook)
	case boil.AfterInsertHook:
		projectUserAfterInsertHooks = append(projectUserAfterInsertHooks, projectUserHook)
	case boil.AfterSelectHook:
		projectUserAfterSelectHooks = append(projectUserAfterSelectHooks, projectUserHook)
	case boil.AfterUpdateHook:
		projectUserAfterUpdateHooks = append(projectUserAfterUpdateHooks, projectUserHook)
	case boil.AfterDeleteHook:
		projectUserAfterDeleteHooks = append(projectUserAfterDeleteHooks, projectUserHook)
	case boil.AfterUpsertHook:
		projectUserAfterUpsertHooks = append(projectUserAfterUpsertHooks, projectUserHook)
	}
}

// One returns a single projectUser record from the query.
func (q projectUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProjectUser, error) {
	o := &ProjectUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ProjectUser")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProjectUser records from the query.
func (q projectUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProjectUserSlice, error) {
	var o []*ProjectUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProjectUser slice")
	}

	if len(projectUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProjectUser records in the query.
func (q projectUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ProjectUser rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ProjectUser exists")
	}

	return count > 0, nil
}

// ProjectsProject pointed to by the foreign key.
func (o *ProjectUser) ProjectsProject(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProjectID` = ?", o.ProjectsProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`Projects`")

	return query
}

// Role pointed to by the foreign key.
func (o *ProjectUser) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`RoleID` = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "`Roles`")

	return query
}

// User pointed to by the foreign key.
func (o *ProjectUser) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`UserID` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`User`")

	return query
}

// LoadProjectsProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectUserL) LoadProjectsProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectUser interface{}, mods queries.Applicator) error {
	var slice []*ProjectUser
	var object *ProjectUser

	if singular {
		object = maybeProjectUser.(*ProjectUser)
	} else {
		slice = *maybeProjectUser.(*[]*ProjectUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectUserR{}
		}
		args = append(args, object.ProjectsProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectUserR{}
			}

			for _, a := range args {
				if a == obj.ProjectsProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectsProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Projects`), qm.WhereIn(`Projects.ProjectID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Projects")
	}

	if len(projectUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectsProject = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.ProjectsProjectProjectUsers = append(foreign.R.ProjectsProjectProjectUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectsProjectID == foreign.ProjectID {
				local.R.ProjectsProject = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.ProjectsProjectProjectUsers = append(foreign.R.ProjectsProjectProjectUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectUserL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectUser interface{}, mods queries.Applicator) error {
	var slice []*ProjectUser
	var object *ProjectUser

	if singular {
		object = maybeProjectUser.(*ProjectUser)
	} else {
		slice = *maybeProjectUser.(*[]*ProjectUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectUserR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectUserR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Roles`), qm.WhereIn(`Roles.RoleID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Roles")
	}

	if len(projectUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.ProjectUsers = append(foreign.R.ProjectUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.RoleID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.ProjectUsers = append(foreign.R.ProjectUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectUser interface{}, mods queries.Applicator) error {
	var slice []*ProjectUser
	var object *ProjectUser

	if singular {
		object = maybeProjectUser.(*ProjectUser)
	} else {
		slice = *maybeProjectUser.(*[]*ProjectUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectUserR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectUserR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`User`), qm.WhereIn(`User.UserID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for User")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for User")
	}

	if len(projectUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ProjectUsers = append(foreign.R.ProjectUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ProjectUsers = append(foreign.R.ProjectUsers, local)
				break
			}
		}
	}

	return nil
}

// SetProjectsProject of the projectUser to the related item.
// Sets o.R.ProjectsProject to related.
// Adds o to related.R.ProjectsProjectProjectUsers.
func (o *ProjectUser) SetProjectsProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ProjectUser` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Projects_Project_id"}),
		strmangle.WhereClause("`", "`", 0, projectUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ProjectID, o.RoleID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectsProjectID = related.ProjectID
	if o.R == nil {
		o.R = &projectUserR{
			ProjectsProject: related,
		}
	} else {
		o.R.ProjectsProject = related
	}

	if related.R == nil {
		related.R = &projectR{
			ProjectsProjectProjectUsers: ProjectUserSlice{o},
		}
	} else {
		related.R.ProjectsProjectProjectUsers = append(related.R.ProjectsProjectProjectUsers, o)
	}

	return nil
}

// SetRole of the projectUser to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.ProjectUsers.
func (o *ProjectUser) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ProjectUser` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Role_id"}),
		strmangle.WhereClause("`", "`", 0, projectUserPrimaryKeyColumns),
	)
	values := []interface{}{related.RoleID, o.RoleID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.RoleID
	if o.R == nil {
		o.R = &projectUserR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			ProjectUsers: ProjectUserSlice{o},
		}
	} else {
		related.R.ProjectUsers = append(related.R.ProjectUsers, o)
	}

	return nil
}

// SetUser of the projectUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ProjectUsers.
func (o *ProjectUser) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ProjectUser` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"User_id"}),
		strmangle.WhereClause("`", "`", 0, projectUserPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.RoleID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &projectUserR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ProjectUsers: ProjectUserSlice{o},
		}
	} else {
		related.R.ProjectUsers = append(related.R.ProjectUsers, o)
	}

	return nil
}

// ProjectUsers retrieves all the records using an executor.
func ProjectUsers(mods ...qm.QueryMod) projectUserQuery {
	mods = append(mods, qm.From("`ProjectUser`"))
	return projectUserQuery{NewQuery(mods...)}
}

// FindProjectUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProjectUser(ctx context.Context, exec boil.ContextExecutor, roleID int, userID string, selectCols ...string) (*ProjectUser, error) {
	projectUserObj := &ProjectUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ProjectUser` where `Role_id`=? AND `User_id`=?", sel,
	)

	q := queries.Raw(query, roleID, userID)

	err := q.Bind(ctx, exec, projectUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ProjectUser")
	}

	return projectUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProjectUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ProjectUser provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectUserInsertCacheMut.RLock()
	cache, cached := projectUserInsertCache[key]
	projectUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectUserAllColumns,
			projectUserColumnsWithDefault,
			projectUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectUserType, projectUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectUserType, projectUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ProjectUser` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ProjectUser` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ProjectUser` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, projectUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ProjectUser")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RoleID,
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ProjectUser")
	}

CacheNoHooks:
	if !cached {
		projectUserInsertCacheMut.Lock()
		projectUserInsertCache[key] = cache
		projectUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProjectUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProjectUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	projectUserUpdateCacheMut.RLock()
	cache, cached := projectUserUpdateCache[key]
	projectUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectUserAllColumns,
			projectUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ProjectUser, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ProjectUser` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, projectUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectUserType, projectUserMapping, append(wl, projectUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ProjectUser row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ProjectUser")
	}

	if !cached {
		projectUserUpdateCacheMut.Lock()
		projectUserUpdateCache[key] = cache
		projectUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ProjectUser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ProjectUser")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ProjectUser` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in projectUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all projectUser")
	}
	return rowsAff, nil
}

var mySQLProjectUserUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProjectUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ProjectUser provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProjectUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectUserUpsertCacheMut.RLock()
	cache, cached := projectUserUpsertCache[key]
	projectUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			projectUserAllColumns,
			projectUserColumnsWithDefault,
			projectUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			projectUserAllColumns,
			projectUserPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ProjectUser, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "ProjectUser", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ProjectUser` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(projectUserType, projectUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectUserType, projectUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ProjectUser")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(projectUserType, projectUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ProjectUser")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ProjectUser")
	}

CacheNoHooks:
	if !cached {
		projectUserUpsertCacheMut.Lock()
		projectUserUpsertCache[key] = cache
		projectUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProjectUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProjectUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProjectUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectUserPrimaryKeyMapping)
	sql := "DELETE FROM `ProjectUser` WHERE `Role_id`=? AND `User_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ProjectUser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ProjectUser")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q projectUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no projectUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ProjectUser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ProjectUser")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(projectUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ProjectUser` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from projectUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ProjectUser")
	}

	if len(projectUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProjectUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProjectUser(ctx, exec, o.RoleID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ProjectUser`.* FROM `ProjectUser` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProjectUserSlice")
	}

	*o = slice

	return nil
}

// ProjectUserExists checks if the ProjectUser row exists.
func ProjectUserExists(ctx context.Context, exec boil.ContextExecutor, roleID int, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ProjectUser` where `Role_id`=? AND `User_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, roleID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, roleID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ProjectUser exists")
	}

	return exists, nil
}
