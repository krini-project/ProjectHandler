// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkflows(t *testing.T) {
	t.Parallel()

	query := Workflows()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkflowsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkflowsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Workflows().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkflowsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkflowSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkflowsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkflowExists(ctx, tx, o.WorkflowID)
	if err != nil {
		t.Errorf("Unable to check if Workflow exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkflowExists to return true, but got false.")
	}
}

func testWorkflowsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workflowFound, err := FindWorkflow(ctx, tx, o.WorkflowID)
	if err != nil {
		t.Error(err)
	}

	if workflowFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkflowsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Workflows().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkflowsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Workflows().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkflowsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workflowOne := &Workflow{}
	workflowTwo := &Workflow{}
	if err = randomize.Struct(seed, workflowOne, workflowDBTypes, false, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}
	if err = randomize.Struct(seed, workflowTwo, workflowDBTypes, false, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workflowOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workflowTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Workflows().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkflowsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workflowOne := &Workflow{}
	workflowTwo := &Workflow{}
	if err = randomize.Struct(seed, workflowOne, workflowDBTypes, false, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}
	if err = randomize.Struct(seed, workflowTwo, workflowDBTypes, false, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workflowOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workflowTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workflowBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func workflowAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflow) error {
	*o = Workflow{}
	return nil
}

func testWorkflowsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Workflow{}
	o := &Workflow{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workflowDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Workflow object: %s", err)
	}

	AddWorkflowHook(boil.BeforeInsertHook, workflowBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workflowBeforeInsertHooks = []WorkflowHook{}

	AddWorkflowHook(boil.AfterInsertHook, workflowAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workflowAfterInsertHooks = []WorkflowHook{}

	AddWorkflowHook(boil.AfterSelectHook, workflowAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workflowAfterSelectHooks = []WorkflowHook{}

	AddWorkflowHook(boil.BeforeUpdateHook, workflowBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workflowBeforeUpdateHooks = []WorkflowHook{}

	AddWorkflowHook(boil.AfterUpdateHook, workflowAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workflowAfterUpdateHooks = []WorkflowHook{}

	AddWorkflowHook(boil.BeforeDeleteHook, workflowBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workflowBeforeDeleteHooks = []WorkflowHook{}

	AddWorkflowHook(boil.AfterDeleteHook, workflowAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workflowAfterDeleteHooks = []WorkflowHook{}

	AddWorkflowHook(boil.BeforeUpsertHook, workflowBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workflowBeforeUpsertHooks = []WorkflowHook{}

	AddWorkflowHook(boil.AfterUpsertHook, workflowAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workflowAfterUpsertHooks = []WorkflowHook{}
}

func testWorkflowsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkflowsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workflowColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkflowToManyWorkflowruns(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflow
	var b, c Workflowrun

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, workflowrunDBTypes, false, workflowrunColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, workflowrunDBTypes, false, workflowrunColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WorkflowID, a.WorkflowID)
	queries.Assign(&c.WorkflowID, a.WorkflowID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Workflowruns().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WorkflowID, b.WorkflowID) {
			bFound = true
		}
		if queries.Equal(v.WorkflowID, c.WorkflowID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WorkflowSlice{&a}
	if err = a.L.LoadWorkflowruns(ctx, tx, false, (*[]*Workflow)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Workflowruns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Workflowruns = nil
	if err = a.L.LoadWorkflowruns(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Workflowruns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWorkflowToManyAddOpWorkflowruns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflow
	var b, c, d, e Workflowrun

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Workflowrun{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Workflowrun{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWorkflowruns(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.WorkflowID, first.WorkflowID) {
			t.Error("foreign key was wrong value", a.WorkflowID, first.WorkflowID)
		}
		if !queries.Equal(a.WorkflowID, second.WorkflowID) {
			t.Error("foreign key was wrong value", a.WorkflowID, second.WorkflowID)
		}

		if first.R.Workflow != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Workflow != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Workflowruns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Workflowruns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Workflowruns().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWorkflowToManySetOpWorkflowruns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflow
	var b, c, d, e Workflowrun

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Workflowrun{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWorkflowruns(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWorkflowruns(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WorkflowID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WorkflowID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.WorkflowID, d.WorkflowID) {
		t.Error("foreign key was wrong value", a.WorkflowID, d.WorkflowID)
	}
	if !queries.Equal(a.WorkflowID, e.WorkflowID) {
		t.Error("foreign key was wrong value", a.WorkflowID, e.WorkflowID)
	}

	if b.R.Workflow != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Workflow != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Workflow != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Workflow != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Workflowruns[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Workflowruns[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testWorkflowToManyRemoveOpWorkflowruns(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflow
	var b, c, d, e Workflowrun

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Workflowrun{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWorkflowruns(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWorkflowruns(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WorkflowID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WorkflowID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Workflow != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Workflow != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Workflow != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Workflow != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Workflowruns) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Workflowruns[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Workflowruns[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testWorkflowToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Workflow
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workflowDBTypes, false, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ProjectID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProjectID != foreign.ProjectID {
		t.Errorf("want: %v, got %v", foreign.ProjectID, check.ProjectID)
	}

	slice := WorkflowSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*Workflow)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkflowToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflow
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Workflows[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ProjectID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ProjectID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ProjectID)
		}
	}
}

func testWorkflowsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkflowsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkflowSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkflowsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Workflows().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workflowDBTypes = map[string]string{`WorkflowID`: `int`, `Workflowname`: `varchar`, `Version`: `varchar`, `Link`: `varchar`, `ProjectID`: `varchar`}
	_               = bytes.MinRead
)

func testWorkflowsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workflowPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workflowAllColumns) == len(workflowPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkflowsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workflowAllColumns) == len(workflowPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Workflow{}
	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workflowDBTypes, true, workflowPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workflowAllColumns, workflowPrimaryKeyColumns) {
		fields = workflowAllColumns
	} else {
		fields = strmangle.SetComplement(
			workflowAllColumns,
			workflowPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkflowSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkflowsUpsert(t *testing.T) {
	t.Parallel()

	if len(workflowAllColumns) == len(workflowPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLWorkflowUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Workflow{}
	if err = randomize.Struct(seed, &o, workflowDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Workflow: %s", err)
	}

	count, err := Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workflowDBTypes, false, workflowPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Workflow: %s", err)
	}

	count, err = Workflows().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
