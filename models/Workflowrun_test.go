// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkflowruns(t *testing.T) {
	t.Parallel()

	query := Workflowruns()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkflowrunsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkflowrunsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Workflowruns().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkflowrunsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkflowrunSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkflowrunsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkflowrunExists(ctx, tx, o.WorkflowrunID)
	if err != nil {
		t.Errorf("Unable to check if Workflowrun exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkflowrunExists to return true, but got false.")
	}
}

func testWorkflowrunsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workflowrunFound, err := FindWorkflowrun(ctx, tx, o.WorkflowrunID)
	if err != nil {
		t.Error(err)
	}

	if workflowrunFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkflowrunsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Workflowruns().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkflowrunsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Workflowruns().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkflowrunsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workflowrunOne := &Workflowrun{}
	workflowrunTwo := &Workflowrun{}
	if err = randomize.Struct(seed, workflowrunOne, workflowrunDBTypes, false, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}
	if err = randomize.Struct(seed, workflowrunTwo, workflowrunDBTypes, false, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workflowrunOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workflowrunTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Workflowruns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkflowrunsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workflowrunOne := &Workflowrun{}
	workflowrunTwo := &Workflowrun{}
	if err = randomize.Struct(seed, workflowrunOne, workflowrunDBTypes, false, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}
	if err = randomize.Struct(seed, workflowrunTwo, workflowrunDBTypes, false, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workflowrunOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workflowrunTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workflowrunBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func workflowrunAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Workflowrun) error {
	*o = Workflowrun{}
	return nil
}

func testWorkflowrunsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Workflowrun{}
	o := &Workflowrun{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workflowrunDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Workflowrun object: %s", err)
	}

	AddWorkflowrunHook(boil.BeforeInsertHook, workflowrunBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workflowrunBeforeInsertHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.AfterInsertHook, workflowrunAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workflowrunAfterInsertHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.AfterSelectHook, workflowrunAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workflowrunAfterSelectHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.BeforeUpdateHook, workflowrunBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workflowrunBeforeUpdateHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.AfterUpdateHook, workflowrunAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workflowrunAfterUpdateHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.BeforeDeleteHook, workflowrunBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workflowrunBeforeDeleteHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.AfterDeleteHook, workflowrunAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workflowrunAfterDeleteHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.BeforeUpsertHook, workflowrunBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workflowrunBeforeUpsertHooks = []WorkflowrunHook{}

	AddWorkflowrunHook(boil.AfterUpsertHook, workflowrunAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workflowrunAfterUpsertHooks = []WorkflowrunHook{}
}

func testWorkflowrunsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkflowrunsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workflowrunColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkflowrunToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Workflowrun
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProjectID, foreign.ProjectID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ProjectID, foreign.ProjectID) {
		t.Errorf("want: %v, got %v", foreign.ProjectID, check.ProjectID)
	}

	slice := WorkflowrunSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*Workflowrun)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkflowrunToOneWESEndpointUsingWESEndpoint(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Workflowrun
	var foreign WESEndpoint

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, wESEndpointDBTypes, false, wESEndpointColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WESEndpoint struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.WESEndpointID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.WESEndpoint().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WorkflowrunSlice{&local}
	if err = local.L.LoadWESEndpoint(ctx, tx, false, (*[]*Workflowrun)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WESEndpoint == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.WESEndpoint = nil
	if err = local.L.LoadWESEndpoint(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WESEndpoint == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkflowrunToOneWorkflowUsingWorkflow(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Workflowrun
	var foreign Workflow

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, workflowDBTypes, false, workflowColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflow struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.WorkflowID, foreign.WorkflowID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Workflow().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.WorkflowID, foreign.WorkflowID) {
		t.Errorf("want: %v, got %v", foreign.WorkflowID, check.WorkflowID)
	}

	slice := WorkflowrunSlice{&local}
	if err = local.L.LoadWorkflow(ctx, tx, false, (*[]*Workflowrun)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Workflow == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Workflow = nil
	if err = local.L.LoadWorkflow(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Workflow == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkflowrunToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflowrun
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Workflowruns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProjectID, x.ProjectID) {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProjectID, x.ProjectID) {
			t.Error("foreign key was wrong value", a.ProjectID, x.ProjectID)
		}
	}
}

func testWorkflowrunToOneRemoveOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflowrun
	var b Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProject(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProject(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Project().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Project != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProjectID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Workflowruns) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWorkflowrunToOneSetOpWESEndpointUsingWESEndpoint(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflowrun
	var b, c WESEndpoint

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, wESEndpointDBTypes, false, strmangle.SetComplement(wESEndpointPrimaryKeyColumns, wESEndpointColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wESEndpointDBTypes, false, strmangle.SetComplement(wESEndpointPrimaryKeyColumns, wESEndpointColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*WESEndpoint{&b, &c} {
		err = a.SetWESEndpoint(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.WESEndpoint != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WESEndpointWorkflowruns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.WESEndpointID, x.ID) {
			t.Error("foreign key was wrong value", a.WESEndpointID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WESEndpointID))
		reflect.Indirect(reflect.ValueOf(&a.WESEndpointID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.WESEndpointID, x.ID) {
			t.Error("foreign key was wrong value", a.WESEndpointID, x.ID)
		}
	}
}

func testWorkflowrunToOneRemoveOpWESEndpointUsingWESEndpoint(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflowrun
	var b WESEndpoint

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, wESEndpointDBTypes, false, strmangle.SetComplement(wESEndpointPrimaryKeyColumns, wESEndpointColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWESEndpoint(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWESEndpoint(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.WESEndpoint().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.WESEndpoint != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.WESEndpointID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.WESEndpointWorkflowruns) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWorkflowrunToOneSetOpWorkflowUsingWorkflow(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflowrun
	var b, c Workflow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Workflow{&b, &c} {
		err = a.SetWorkflow(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Workflow != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Workflowruns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.WorkflowID, x.WorkflowID) {
			t.Error("foreign key was wrong value", a.WorkflowID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WorkflowID))
		reflect.Indirect(reflect.ValueOf(&a.WorkflowID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.WorkflowID, x.WorkflowID) {
			t.Error("foreign key was wrong value", a.WorkflowID, x.WorkflowID)
		}
	}
}

func testWorkflowrunToOneRemoveOpWorkflowUsingWorkflow(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Workflowrun
	var b Workflow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workflowrunDBTypes, false, strmangle.SetComplement(workflowrunPrimaryKeyColumns, workflowrunColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, workflowDBTypes, false, strmangle.SetComplement(workflowPrimaryKeyColumns, workflowColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWorkflow(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWorkflow(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Workflow().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Workflow != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.WorkflowID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Workflowruns) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWorkflowrunsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkflowrunsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkflowrunSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkflowrunsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Workflowruns().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workflowrunDBTypes = map[string]string{`WorkflowrunID`: `int`, `WorkflowID`: `int`, `ProjectID`: `varchar`, `Starttime`: `datetime`, `Endtime`: `datetime`, `State`: `varchar`, `HasError`: `tinyint`, `HasResult`: `tinyint`, `Error`: `varchar`, `Bucket`: `varchar`, `Key`: `varchar`, `WESEndpointID`: `int`}
	_                  = bytes.MinRead
)

func testWorkflowrunsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workflowrunPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workflowrunAllColumns) == len(workflowrunPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkflowrunsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workflowrunAllColumns) == len(workflowrunPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Workflowrun{}
	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workflowrunDBTypes, true, workflowrunPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workflowrunAllColumns, workflowrunPrimaryKeyColumns) {
		fields = workflowrunAllColumns
	} else {
		fields = strmangle.SetComplement(
			workflowrunAllColumns,
			workflowrunPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkflowrunSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkflowrunsUpsert(t *testing.T) {
	t.Parallel()

	if len(workflowrunAllColumns) == len(workflowrunPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLWorkflowrunUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Workflowrun{}
	if err = randomize.Struct(seed, &o, workflowrunDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Workflowrun: %s", err)
	}

	count, err := Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workflowrunDBTypes, false, workflowrunPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Workflowrun struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Workflowrun: %s", err)
	}

	count, err = Workflowruns().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
