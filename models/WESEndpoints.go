// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// WESEndpoint is an object representing the database table.
type WESEndpoint struct {
	ID      int    `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	Name    string `boil:"Name" json:"Name" toml:"Name" yaml:"Name"`
	Link    string `boil:"Link" json:"Link" toml:"Link" yaml:"Link"`
	OwnerID string `boil:"Owner_id" json:"Owner_id" toml:"Owner_id" yaml:"Owner_id"`

	R *wESEndpointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wESEndpointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WESEndpointColumns = struct {
	ID      string
	Name    string
	Link    string
	OwnerID string
}{
	ID:      "ID",
	Name:    "Name",
	Link:    "Link",
	OwnerID: "Owner_id",
}

// Generated where

var WESEndpointWhere = struct {
	ID      whereHelperint
	Name    whereHelperstring
	Link    whereHelperstring
	OwnerID whereHelperstring
}{
	ID:      whereHelperint{field: "`WESEndpoints`.`ID`"},
	Name:    whereHelperstring{field: "`WESEndpoints`.`Name`"},
	Link:    whereHelperstring{field: "`WESEndpoints`.`Link`"},
	OwnerID: whereHelperstring{field: "`WESEndpoints`.`Owner_id`"},
}

// WESEndpointRels is where relationship names are stored.
var WESEndpointRels = struct {
	Owner                   string
	WESEndpointWorkflowruns string
}{
	Owner:                   "Owner",
	WESEndpointWorkflowruns: "WESEndpointWorkflowruns",
}

// wESEndpointR is where relationships are stored.
type wESEndpointR struct {
	Owner                   *Project
	WESEndpointWorkflowruns WorkflowrunSlice
}

// NewStruct creates a new relationship struct
func (*wESEndpointR) NewStruct() *wESEndpointR {
	return &wESEndpointR{}
}

// wESEndpointL is where Load methods for each relationship are stored.
type wESEndpointL struct{}

var (
	wESEndpointAllColumns            = []string{"ID", "Name", "Link", "Owner_id"}
	wESEndpointColumnsWithoutDefault = []string{"Name", "Link", "Owner_id"}
	wESEndpointColumnsWithDefault    = []string{"ID"}
	wESEndpointPrimaryKeyColumns     = []string{"ID"}
)

type (
	// WESEndpointSlice is an alias for a slice of pointers to WESEndpoint.
	// This should generally be used opposed to []WESEndpoint.
	WESEndpointSlice []*WESEndpoint
	// WESEndpointHook is the signature for custom WESEndpoint hook methods
	WESEndpointHook func(context.Context, boil.ContextExecutor, *WESEndpoint) error

	wESEndpointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wESEndpointType                 = reflect.TypeOf(&WESEndpoint{})
	wESEndpointMapping              = queries.MakeStructMapping(wESEndpointType)
	wESEndpointPrimaryKeyMapping, _ = queries.BindMapping(wESEndpointType, wESEndpointMapping, wESEndpointPrimaryKeyColumns)
	wESEndpointInsertCacheMut       sync.RWMutex
	wESEndpointInsertCache          = make(map[string]insertCache)
	wESEndpointUpdateCacheMut       sync.RWMutex
	wESEndpointUpdateCache          = make(map[string]updateCache)
	wESEndpointUpsertCacheMut       sync.RWMutex
	wESEndpointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wESEndpointBeforeInsertHooks []WESEndpointHook
var wESEndpointBeforeUpdateHooks []WESEndpointHook
var wESEndpointBeforeDeleteHooks []WESEndpointHook
var wESEndpointBeforeUpsertHooks []WESEndpointHook

var wESEndpointAfterInsertHooks []WESEndpointHook
var wESEndpointAfterSelectHooks []WESEndpointHook
var wESEndpointAfterUpdateHooks []WESEndpointHook
var wESEndpointAfterDeleteHooks []WESEndpointHook
var wESEndpointAfterUpsertHooks []WESEndpointHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WESEndpoint) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WESEndpoint) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WESEndpoint) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WESEndpoint) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WESEndpoint) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WESEndpoint) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WESEndpoint) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WESEndpoint) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WESEndpoint) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wESEndpointAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWESEndpointHook registers your hook function for all future operations.
func AddWESEndpointHook(hookPoint boil.HookPoint, wESEndpointHook WESEndpointHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		wESEndpointBeforeInsertHooks = append(wESEndpointBeforeInsertHooks, wESEndpointHook)
	case boil.BeforeUpdateHook:
		wESEndpointBeforeUpdateHooks = append(wESEndpointBeforeUpdateHooks, wESEndpointHook)
	case boil.BeforeDeleteHook:
		wESEndpointBeforeDeleteHooks = append(wESEndpointBeforeDeleteHooks, wESEndpointHook)
	case boil.BeforeUpsertHook:
		wESEndpointBeforeUpsertHooks = append(wESEndpointBeforeUpsertHooks, wESEndpointHook)
	case boil.AfterInsertHook:
		wESEndpointAfterInsertHooks = append(wESEndpointAfterInsertHooks, wESEndpointHook)
	case boil.AfterSelectHook:
		wESEndpointAfterSelectHooks = append(wESEndpointAfterSelectHooks, wESEndpointHook)
	case boil.AfterUpdateHook:
		wESEndpointAfterUpdateHooks = append(wESEndpointAfterUpdateHooks, wESEndpointHook)
	case boil.AfterDeleteHook:
		wESEndpointAfterDeleteHooks = append(wESEndpointAfterDeleteHooks, wESEndpointHook)
	case boil.AfterUpsertHook:
		wESEndpointAfterUpsertHooks = append(wESEndpointAfterUpsertHooks, wESEndpointHook)
	}
}

// One returns a single wESEndpoint record from the query.
func (q wESEndpointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WESEndpoint, error) {
	o := &WESEndpoint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for WESEndpoints")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WESEndpoint records from the query.
func (q wESEndpointQuery) All(ctx context.Context, exec boil.ContextExecutor) (WESEndpointSlice, error) {
	var o []*WESEndpoint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WESEndpoint slice")
	}

	if len(wESEndpointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WESEndpoint records in the query.
func (q wESEndpointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count WESEndpoints rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wESEndpointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if WESEndpoints exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *WESEndpoint) Owner(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProjectID` = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`Projects`")

	return query
}

// WESEndpointWorkflowruns retrieves all the Workflowrun's Workflowruns with an executor via WES_Endpoint_id column.
func (o *WESEndpoint) WESEndpointWorkflowruns(mods ...qm.QueryMod) workflowrunQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Workflowrun`.`WES_Endpoint_id`=?", o.ID),
	)

	query := Workflowruns(queryMods...)
	queries.SetFrom(query.Query, "`Workflowrun`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Workflowrun`.*"})
	}

	return query
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wESEndpointL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWESEndpoint interface{}, mods queries.Applicator) error {
	var slice []*WESEndpoint
	var object *WESEndpoint

	if singular {
		object = maybeWESEndpoint.(*WESEndpoint)
	} else {
		slice = *maybeWESEndpoint.(*[]*WESEndpoint)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wESEndpointR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wESEndpointR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Projects`), qm.WhereIn(`Projects.ProjectID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Projects")
	}

	if len(wESEndpointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.OwnerWESEndpoints = append(foreign.R.OwnerWESEndpoints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ProjectID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.OwnerWESEndpoints = append(foreign.R.OwnerWESEndpoints, local)
				break
			}
		}
	}

	return nil
}

// LoadWESEndpointWorkflowruns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (wESEndpointL) LoadWESEndpointWorkflowruns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWESEndpoint interface{}, mods queries.Applicator) error {
	var slice []*WESEndpoint
	var object *WESEndpoint

	if singular {
		object = maybeWESEndpoint.(*WESEndpoint)
	} else {
		slice = *maybeWESEndpoint.(*[]*WESEndpoint)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wESEndpointR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wESEndpointR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Workflowrun`), qm.WhereIn(`Workflowrun.WES_Endpoint_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workflowrun")
	}

	var resultSlice []*Workflowrun
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workflowrun")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Workflowrun")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Workflowrun")
	}

	if len(workflowrunAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WESEndpointWorkflowruns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &workflowrunR{}
			}
			foreign.R.WESEndpoint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WESEndpointID) {
				local.R.WESEndpointWorkflowruns = append(local.R.WESEndpointWorkflowruns, foreign)
				if foreign.R == nil {
					foreign.R = &workflowrunR{}
				}
				foreign.R.WESEndpoint = local
				break
			}
		}
	}

	return nil
}

// SetOwner of the wESEndpoint to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerWESEndpoints.
func (o *WESEndpoint) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `WESEndpoints` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Owner_id"}),
		strmangle.WhereClause("`", "`", 0, wESEndpointPrimaryKeyColumns),
	)
	values := []interface{}{related.ProjectID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ProjectID
	if o.R == nil {
		o.R = &wESEndpointR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &projectR{
			OwnerWESEndpoints: WESEndpointSlice{o},
		}
	} else {
		related.R.OwnerWESEndpoints = append(related.R.OwnerWESEndpoints, o)
	}

	return nil
}

// AddWESEndpointWorkflowruns adds the given related objects to the existing relationships
// of the WESEndpoint, optionally inserting them as new records.
// Appends related to o.R.WESEndpointWorkflowruns.
// Sets related.R.WESEndpoint appropriately.
func (o *WESEndpoint) AddWESEndpointWorkflowruns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Workflowrun) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WESEndpointID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Workflowrun` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WES_Endpoint_id"}),
				strmangle.WhereClause("`", "`", 0, workflowrunPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.WorkflowrunID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WESEndpointID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &wESEndpointR{
			WESEndpointWorkflowruns: related,
		}
	} else {
		o.R.WESEndpointWorkflowruns = append(o.R.WESEndpointWorkflowruns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &workflowrunR{
				WESEndpoint: o,
			}
		} else {
			rel.R.WESEndpoint = o
		}
	}
	return nil
}

// SetWESEndpointWorkflowruns removes all previously related items of the
// WESEndpoint replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WESEndpoint's WESEndpointWorkflowruns accordingly.
// Replaces o.R.WESEndpointWorkflowruns with related.
// Sets related.R.WESEndpoint's WESEndpointWorkflowruns accordingly.
func (o *WESEndpoint) SetWESEndpointWorkflowruns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Workflowrun) error {
	query := "update `Workflowrun` set `WES_Endpoint_id` = null where `WES_Endpoint_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WESEndpointWorkflowruns {
			queries.SetScanner(&rel.WESEndpointID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WESEndpoint = nil
		}

		o.R.WESEndpointWorkflowruns = nil
	}
	return o.AddWESEndpointWorkflowruns(ctx, exec, insert, related...)
}

// RemoveWESEndpointWorkflowruns relationships from objects passed in.
// Removes related items from R.WESEndpointWorkflowruns (uses pointer comparison, removal does not keep order)
// Sets related.R.WESEndpoint.
func (o *WESEndpoint) RemoveWESEndpointWorkflowruns(ctx context.Context, exec boil.ContextExecutor, related ...*Workflowrun) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WESEndpointID, nil)
		if rel.R != nil {
			rel.R.WESEndpoint = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("WES_Endpoint_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WESEndpointWorkflowruns {
			if rel != ri {
				continue
			}

			ln := len(o.R.WESEndpointWorkflowruns)
			if ln > 1 && i < ln-1 {
				o.R.WESEndpointWorkflowruns[i] = o.R.WESEndpointWorkflowruns[ln-1]
			}
			o.R.WESEndpointWorkflowruns = o.R.WESEndpointWorkflowruns[:ln-1]
			break
		}
	}

	return nil
}

// WESEndpoints retrieves all the records using an executor.
func WESEndpoints(mods ...qm.QueryMod) wESEndpointQuery {
	mods = append(mods, qm.From("`WESEndpoints`"))
	return wESEndpointQuery{NewQuery(mods...)}
}

// FindWESEndpoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWESEndpoint(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*WESEndpoint, error) {
	wESEndpointObj := &WESEndpoint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `WESEndpoints` where `ID`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wESEndpointObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from WESEndpoints")
	}

	return wESEndpointObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WESEndpoint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no WESEndpoints provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wESEndpointColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wESEndpointInsertCacheMut.RLock()
	cache, cached := wESEndpointInsertCache[key]
	wESEndpointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wESEndpointAllColumns,
			wESEndpointColumnsWithDefault,
			wESEndpointColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wESEndpointType, wESEndpointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wESEndpointType, wESEndpointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `WESEndpoints` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `WESEndpoints` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `WESEndpoints` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, wESEndpointPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into WESEndpoints")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == wESEndpointMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for WESEndpoints")
	}

CacheNoHooks:
	if !cached {
		wESEndpointInsertCacheMut.Lock()
		wESEndpointInsertCache[key] = cache
		wESEndpointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WESEndpoint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WESEndpoint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wESEndpointUpdateCacheMut.RLock()
	cache, cached := wESEndpointUpdateCache[key]
	wESEndpointUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wESEndpointAllColumns,
			wESEndpointPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update WESEndpoints, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `WESEndpoints` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, wESEndpointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wESEndpointType, wESEndpointMapping, append(wl, wESEndpointPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update WESEndpoints row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for WESEndpoints")
	}

	if !cached {
		wESEndpointUpdateCacheMut.Lock()
		wESEndpointUpdateCache[key] = cache
		wESEndpointUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wESEndpointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for WESEndpoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for WESEndpoints")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WESEndpointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wESEndpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `WESEndpoints` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wESEndpointPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wESEndpoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wESEndpoint")
	}
	return rowsAff, nil
}

var mySQLWESEndpointUniqueColumns = []string{
	"ID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WESEndpoint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no WESEndpoints provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wESEndpointColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWESEndpointUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wESEndpointUpsertCacheMut.RLock()
	cache, cached := wESEndpointUpsertCache[key]
	wESEndpointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			wESEndpointAllColumns,
			wESEndpointColumnsWithDefault,
			wESEndpointColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			wESEndpointAllColumns,
			wESEndpointPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert WESEndpoints, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "WESEndpoints", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `WESEndpoints` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(wESEndpointType, wESEndpointMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wESEndpointType, wESEndpointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for WESEndpoints")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == wESEndpointMapping["ID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(wESEndpointType, wESEndpointMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for WESEndpoints")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for WESEndpoints")
	}

CacheNoHooks:
	if !cached {
		wESEndpointUpsertCacheMut.Lock()
		wESEndpointUpsertCache[key] = cache
		wESEndpointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WESEndpoint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WESEndpoint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WESEndpoint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wESEndpointPrimaryKeyMapping)
	sql := "DELETE FROM `WESEndpoints` WHERE `ID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from WESEndpoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for WESEndpoints")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wESEndpointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wESEndpointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from WESEndpoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for WESEndpoints")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WESEndpointSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wESEndpointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wESEndpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `WESEndpoints` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wESEndpointPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wESEndpoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for WESEndpoints")
	}

	if len(wESEndpointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WESEndpoint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWESEndpoint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WESEndpointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WESEndpointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wESEndpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `WESEndpoints`.* FROM `WESEndpoints` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, wESEndpointPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WESEndpointSlice")
	}

	*o = slice

	return nil
}

// WESEndpointExists checks if the WESEndpoint row exists.
func WESEndpointExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `WESEndpoints` where `ID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if WESEndpoints exists")
	}

	return exists, nil
}
