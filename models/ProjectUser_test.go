// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectUsers(t *testing.T) {
	t.Parallel()

	query := ProjectUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectUserExists(ctx, tx, o.RoleID, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if ProjectUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectUserExists to return true, but got false.")
	}
}

func testProjectUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectUserFound, err := FindProjectUser(ctx, tx, o.RoleID, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if projectUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectUserOne := &ProjectUser{}
	projectUserTwo := &ProjectUser{}
	if err = randomize.Struct(seed, projectUserOne, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}
	if err = randomize.Struct(seed, projectUserTwo, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectUserOne := &ProjectUser{}
	projectUserTwo := &ProjectUser{}
	if err = randomize.Struct(seed, projectUserOne, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}
	if err = randomize.Struct(seed, projectUserTwo, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func projectUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectUser) error {
	*o = ProjectUser{}
	return nil
}

func testProjectUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectUser{}
	o := &ProjectUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectUser object: %s", err)
	}

	AddProjectUserHook(boil.BeforeInsertHook, projectUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectUserBeforeInsertHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.AfterInsertHook, projectUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectUserAfterInsertHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.AfterSelectHook, projectUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectUserAfterSelectHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.BeforeUpdateHook, projectUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectUserBeforeUpdateHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.AfterUpdateHook, projectUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectUserAfterUpdateHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.BeforeDeleteHook, projectUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectUserBeforeDeleteHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.AfterDeleteHook, projectUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectUserAfterDeleteHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.BeforeUpsertHook, projectUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectUserBeforeUpsertHooks = []ProjectUserHook{}

	AddProjectUserHook(boil.AfterUpsertHook, projectUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectUserAfterUpsertHooks = []ProjectUserHook{}
}

func testProjectUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectUserToOneProjectUsingProjectsProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectUser
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectsProjectID = foreign.ProjectID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProjectsProject().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProjectID != foreign.ProjectID {
		t.Errorf("want: %v, got %v", foreign.ProjectID, check.ProjectID)
	}

	slice := ProjectUserSlice{&local}
	if err = local.L.LoadProjectsProject(ctx, tx, false, (*[]*ProjectUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProjectsProject == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProjectsProject = nil
	if err = local.L.LoadProjectsProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProjectsProject == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectUserToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectUser
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleID = foreign.RoleID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.RoleID != foreign.RoleID {
		t.Errorf("want: %v, got %v", foreign.RoleID, check.RoleID)
	}

	slice := ProjectUserSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*ProjectUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectUserToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectUser
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectUserDBTypes, false, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := ProjectUserSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*ProjectUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectUserToOneSetOpProjectUsingProjectsProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectUser
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectUserDBTypes, false, strmangle.SetComplement(projectUserPrimaryKeyColumns, projectUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProjectsProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProjectsProject != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsProjectProjectUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectsProjectID != x.ProjectID {
			t.Error("foreign key was wrong value", a.ProjectsProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectsProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectsProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectsProjectID != x.ProjectID {
			t.Error("foreign key was wrong value", a.ProjectsProjectID, x.ProjectID)
		}
	}
}
func testProjectUserToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectUser
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectUserDBTypes, false, strmangle.SetComplement(projectUserPrimaryKeyColumns, projectUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleID != x.RoleID {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		if exists, err := ProjectUserExists(ctx, tx, a.RoleID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testProjectUserToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectUser
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectUserDBTypes, false, strmangle.SetComplement(projectUserPrimaryKeyColumns, projectUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := ProjectUserExists(ctx, tx, a.RoleID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testProjectUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectUserDBTypes = map[string]string{`UserID`: `varchar`, `RoleID`: `int`, `ProjectsProjectID`: `varchar`}
	_                  = bytes.MinRead
)

func testProjectUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectUserAllColumns) == len(projectUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectUserAllColumns) == len(projectUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectUser{}
	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectUserDBTypes, true, projectUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectUserAllColumns, projectUserPrimaryKeyColumns) {
		fields = projectUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectUserAllColumns,
			projectUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(projectUserAllColumns) == len(projectUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProjectUserUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectUser{}
	if err = randomize.Struct(seed, &o, projectUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectUser: %s", err)
	}

	count, err := ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectUserDBTypes, false, projectUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectUser: %s", err)
	}

	count, err = ProjectUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
